# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _lora_sdr_swig
else:
    import _lora_sdr_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def high_res_timer_now() -> "gr::high_res_timer_type":
    r"""high_res_timer_now() -> gr::high_res_timer_type"""
    return _lora_sdr_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    r"""high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _lora_sdr_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    r"""high_res_timer_tps() -> gr::high_res_timer_type"""
    return _lora_sdr_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    r"""high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _lora_sdr_swig.high_res_timer_epoch()
class add_crc(object):
    r"""
    This block add LoRa CRC (Cyclic redundancy check) into the payload, more info see add_crc_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::add_crc.

    To avoid accidental use of raw pointers, lora_sdr::add_crc's constructor is in a private implementation class. lora_sdr::add_crc::make is the public interface for creating new instances.

    Args:
        has_crc : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(has_crc: "bool") -> "gr::lora_sdr::add_crc::sptr":
        r"""
        make(bool has_crc) -> add_crc_sptr
        This block add LoRa CRC (Cyclic redundancy check) into the payload, more info see add_crc_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::add_crc.

        To avoid accidental use of raw pointers, lora_sdr::add_crc's constructor is in a private implementation class. lora_sdr::add_crc::make is the public interface for creating new instances.

        Args:
            has_crc : 
        """
        return _lora_sdr_swig.add_crc_make(has_crc)
    __swig_destroy__ = _lora_sdr_swig.delete_add_crc

# Register add_crc in _lora_sdr_swig:
_lora_sdr_swig.add_crc_swigregister(add_crc)

def add_crc_make(has_crc: "bool") -> "gr::lora_sdr::add_crc::sptr":
    r"""
    add_crc_make(bool has_crc) -> add_crc_sptr
    This block add LoRa CRC (Cyclic redundancy check) into the payload, more info see add_crc_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::add_crc.

    To avoid accidental use of raw pointers, lora_sdr::add_crc's constructor is in a private implementation class. lora_sdr::add_crc::make is the public interface for creating new instances.

    Args:
        has_crc : 
    """
    return _lora_sdr_swig.add_crc_make(has_crc)

class add_crc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::add_crc > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(add_crc_sptr self) -> add_crc_sptr
        __init__(add_crc_sptr self, add_crc p) -> add_crc_sptr
        """
        _lora_sdr_swig.add_crc_sptr_swiginit(self, _lora_sdr_swig.new_add_crc_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::add_crc *":
        r"""__deref__(add_crc_sptr self) -> add_crc"""
        return _lora_sdr_swig.add_crc_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_add_crc_sptr

    def make(self, has_crc: "bool") -> "gr::lora_sdr::add_crc::sptr":
        r"""
        make(add_crc_sptr self, bool has_crc) -> add_crc_sptr
        This block add LoRa CRC (Cyclic redundancy check) into the payload, more info see add_crc_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::add_crc.

        To avoid accidental use of raw pointers, lora_sdr::add_crc's constructor is in a private implementation class. lora_sdr::add_crc::make is the public interface for creating new instances.

        Args:
            has_crc : 
        """
        return _lora_sdr_swig.add_crc_sptr_make(self, has_crc)

    def history(self) -> "unsigned int":
        r"""history(add_crc_sptr self) -> unsigned int"""
        return _lora_sdr_swig.add_crc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(add_crc_sptr self, int which, int delay)
        declare_sample_delay(add_crc_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.add_crc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(add_crc_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.add_crc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(add_crc_sptr self, int multiple)"""
        return _lora_sdr_swig.add_crc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(add_crc_sptr self) -> int"""
        return _lora_sdr_swig.add_crc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(add_crc_sptr self) -> double"""
        return _lora_sdr_swig.add_crc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(add_crc_sptr self) -> uint64_t"""
        return _lora_sdr_swig.add_crc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(add_crc_sptr self) -> uint64_t"""
        return _lora_sdr_swig.add_crc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(add_crc_sptr self) -> bool"""
        return _lora_sdr_swig.add_crc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(add_crc_sptr self) -> bool"""
        return _lora_sdr_swig.add_crc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(add_crc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.add_crc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(add_crc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.add_crc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(add_crc_sptr self, std::string level)"""
        return _lora_sdr_swig.add_crc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(add_crc_sptr self) -> std::string"""
        return _lora_sdr_swig.add_crc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(add_crc_sptr self) -> int"""
        return _lora_sdr_swig.add_crc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(add_crc_sptr self, int m)"""
        return _lora_sdr_swig.add_crc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(add_crc_sptr self)"""
        return _lora_sdr_swig.add_crc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(add_crc_sptr self) -> bool"""
        return _lora_sdr_swig.add_crc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(add_crc_sptr self, int m)"""
        return _lora_sdr_swig.add_crc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(add_crc_sptr self) -> int"""
        return _lora_sdr_swig.add_crc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(add_crc_sptr self, int i) -> long"""
        return _lora_sdr_swig.add_crc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(add_crc_sptr self, long max_output_buffer)
        set_max_output_buffer(add_crc_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.add_crc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(add_crc_sptr self, int i) -> long"""
        return _lora_sdr_swig.add_crc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(add_crc_sptr self, long min_output_buffer)
        set_min_output_buffer(add_crc_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.add_crc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(add_crc_sptr self) -> float"""
        return _lora_sdr_swig.add_crc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(add_crc_sptr self) -> float"""
        return _lora_sdr_swig.add_crc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(add_crc_sptr self) -> float"""
        return _lora_sdr_swig.add_crc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(add_crc_sptr self) -> float"""
        return _lora_sdr_swig.add_crc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(add_crc_sptr self) -> float"""
        return _lora_sdr_swig.add_crc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(add_crc_sptr self) -> float"""
        return _lora_sdr_swig.add_crc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(add_crc_sptr self, int which) -> float
        pc_input_buffers_full(add_crc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.add_crc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(add_crc_sptr self, int which) -> float
        pc_input_buffers_full_avg(add_crc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.add_crc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(add_crc_sptr self, int which) -> float
        pc_input_buffers_full_var(add_crc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.add_crc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(add_crc_sptr self, int which) -> float
        pc_output_buffers_full(add_crc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.add_crc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(add_crc_sptr self, int which) -> float
        pc_output_buffers_full_avg(add_crc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.add_crc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(add_crc_sptr self, int which) -> float
        pc_output_buffers_full_var(add_crc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.add_crc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(add_crc_sptr self) -> float"""
        return _lora_sdr_swig.add_crc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(add_crc_sptr self) -> float"""
        return _lora_sdr_swig.add_crc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(add_crc_sptr self) -> float"""
        return _lora_sdr_swig.add_crc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(add_crc_sptr self) -> float"""
        return _lora_sdr_swig.add_crc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(add_crc_sptr self) -> float"""
        return _lora_sdr_swig.add_crc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(add_crc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.add_crc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(add_crc_sptr self)"""
        return _lora_sdr_swig.add_crc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(add_crc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.add_crc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(add_crc_sptr self) -> int"""
        return _lora_sdr_swig.add_crc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(add_crc_sptr self) -> int"""
        return _lora_sdr_swig.add_crc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(add_crc_sptr self, int priority) -> int"""
        return _lora_sdr_swig.add_crc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(add_crc_sptr self) -> std::string"""
        return _lora_sdr_swig.add_crc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(add_crc_sptr self) -> std::string"""
        return _lora_sdr_swig.add_crc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(add_crc_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.add_crc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(add_crc_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.add_crc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(add_crc_sptr self) -> long"""
        return _lora_sdr_swig.add_crc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(add_crc_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.add_crc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(add_crc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.add_crc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(add_crc_sptr self) -> std::string"""
        return _lora_sdr_swig.add_crc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(add_crc_sptr self, std::string name)"""
        return _lora_sdr_swig.add_crc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(add_crc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.add_crc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(add_crc_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.add_crc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(add_crc_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.add_crc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(add_crc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.add_crc_sptr_message_subscribers(self, which_port)

# Register add_crc_sptr in _lora_sdr_swig:
_lora_sdr_swig.add_crc_sptr_swigregister(add_crc_sptr)


add_crc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
add_crc = add_crc.make;

class crc_verif(object):
    r"""
    Verifies if the included crc is correct or not for more information about the implementation visit crc_verify_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::crc_verif.

    To avoid accidental use of raw pointers, lora_sdr::crc_verif's constructor is in a private implementation class. lora_sdr::crc_verif::make is the public interface for creating new instances.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::lora_sdr::crc_verif::sptr":
        r"""
        make() -> crc_verif_sptr
        Verifies if the included crc is correct or not for more information about the implementation visit crc_verify_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::crc_verif.

        To avoid accidental use of raw pointers, lora_sdr::crc_verif's constructor is in a private implementation class. lora_sdr::crc_verif::make is the public interface for creating new instances.
        """
        return _lora_sdr_swig.crc_verif_make()
    __swig_destroy__ = _lora_sdr_swig.delete_crc_verif

# Register crc_verif in _lora_sdr_swig:
_lora_sdr_swig.crc_verif_swigregister(crc_verif)

def crc_verif_make() -> "gr::lora_sdr::crc_verif::sptr":
    r"""
    crc_verif_make() -> crc_verif_sptr
    Verifies if the included crc is correct or not for more information about the implementation visit crc_verify_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::crc_verif.

    To avoid accidental use of raw pointers, lora_sdr::crc_verif's constructor is in a private implementation class. lora_sdr::crc_verif::make is the public interface for creating new instances.
    """
    return _lora_sdr_swig.crc_verif_make()

class crc_verif_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::crc_verif > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(crc_verif_sptr self) -> crc_verif_sptr
        __init__(crc_verif_sptr self, crc_verif p) -> crc_verif_sptr
        """
        _lora_sdr_swig.crc_verif_sptr_swiginit(self, _lora_sdr_swig.new_crc_verif_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::crc_verif *":
        r"""__deref__(crc_verif_sptr self) -> crc_verif"""
        return _lora_sdr_swig.crc_verif_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_crc_verif_sptr

    def make(self) -> "gr::lora_sdr::crc_verif::sptr":
        r"""
        make(crc_verif_sptr self) -> crc_verif_sptr
        Verifies if the included crc is correct or not for more information about the implementation visit crc_verify_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::crc_verif.

        To avoid accidental use of raw pointers, lora_sdr::crc_verif's constructor is in a private implementation class. lora_sdr::crc_verif::make is the public interface for creating new instances.
        """
        return _lora_sdr_swig.crc_verif_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(crc_verif_sptr self) -> unsigned int"""
        return _lora_sdr_swig.crc_verif_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(crc_verif_sptr self, int which, int delay)
        declare_sample_delay(crc_verif_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.crc_verif_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(crc_verif_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.crc_verif_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(crc_verif_sptr self, int multiple)"""
        return _lora_sdr_swig.crc_verif_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(crc_verif_sptr self) -> int"""
        return _lora_sdr_swig.crc_verif_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(crc_verif_sptr self) -> double"""
        return _lora_sdr_swig.crc_verif_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(crc_verif_sptr self) -> uint64_t"""
        return _lora_sdr_swig.crc_verif_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(crc_verif_sptr self) -> uint64_t"""
        return _lora_sdr_swig.crc_verif_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(crc_verif_sptr self) -> bool"""
        return _lora_sdr_swig.crc_verif_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(crc_verif_sptr self) -> bool"""
        return _lora_sdr_swig.crc_verif_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(crc_verif_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.crc_verif_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(crc_verif_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.crc_verif_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(crc_verif_sptr self, std::string level)"""
        return _lora_sdr_swig.crc_verif_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(crc_verif_sptr self) -> std::string"""
        return _lora_sdr_swig.crc_verif_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(crc_verif_sptr self) -> int"""
        return _lora_sdr_swig.crc_verif_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(crc_verif_sptr self, int m)"""
        return _lora_sdr_swig.crc_verif_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(crc_verif_sptr self)"""
        return _lora_sdr_swig.crc_verif_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(crc_verif_sptr self) -> bool"""
        return _lora_sdr_swig.crc_verif_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(crc_verif_sptr self, int m)"""
        return _lora_sdr_swig.crc_verif_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(crc_verif_sptr self) -> int"""
        return _lora_sdr_swig.crc_verif_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(crc_verif_sptr self, int i) -> long"""
        return _lora_sdr_swig.crc_verif_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(crc_verif_sptr self, long max_output_buffer)
        set_max_output_buffer(crc_verif_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.crc_verif_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(crc_verif_sptr self, int i) -> long"""
        return _lora_sdr_swig.crc_verif_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(crc_verif_sptr self, long min_output_buffer)
        set_min_output_buffer(crc_verif_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.crc_verif_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(crc_verif_sptr self) -> float"""
        return _lora_sdr_swig.crc_verif_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(crc_verif_sptr self) -> float"""
        return _lora_sdr_swig.crc_verif_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(crc_verif_sptr self) -> float"""
        return _lora_sdr_swig.crc_verif_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(crc_verif_sptr self) -> float"""
        return _lora_sdr_swig.crc_verif_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(crc_verif_sptr self) -> float"""
        return _lora_sdr_swig.crc_verif_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(crc_verif_sptr self) -> float"""
        return _lora_sdr_swig.crc_verif_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(crc_verif_sptr self, int which) -> float
        pc_input_buffers_full(crc_verif_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.crc_verif_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(crc_verif_sptr self, int which) -> float
        pc_input_buffers_full_avg(crc_verif_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.crc_verif_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(crc_verif_sptr self, int which) -> float
        pc_input_buffers_full_var(crc_verif_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.crc_verif_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(crc_verif_sptr self, int which) -> float
        pc_output_buffers_full(crc_verif_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.crc_verif_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(crc_verif_sptr self, int which) -> float
        pc_output_buffers_full_avg(crc_verif_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.crc_verif_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(crc_verif_sptr self, int which) -> float
        pc_output_buffers_full_var(crc_verif_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.crc_verif_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(crc_verif_sptr self) -> float"""
        return _lora_sdr_swig.crc_verif_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(crc_verif_sptr self) -> float"""
        return _lora_sdr_swig.crc_verif_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(crc_verif_sptr self) -> float"""
        return _lora_sdr_swig.crc_verif_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(crc_verif_sptr self) -> float"""
        return _lora_sdr_swig.crc_verif_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(crc_verif_sptr self) -> float"""
        return _lora_sdr_swig.crc_verif_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(crc_verif_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.crc_verif_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(crc_verif_sptr self)"""
        return _lora_sdr_swig.crc_verif_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(crc_verif_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.crc_verif_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(crc_verif_sptr self) -> int"""
        return _lora_sdr_swig.crc_verif_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(crc_verif_sptr self) -> int"""
        return _lora_sdr_swig.crc_verif_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(crc_verif_sptr self, int priority) -> int"""
        return _lora_sdr_swig.crc_verif_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(crc_verif_sptr self) -> std::string"""
        return _lora_sdr_swig.crc_verif_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(crc_verif_sptr self) -> std::string"""
        return _lora_sdr_swig.crc_verif_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(crc_verif_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.crc_verif_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(crc_verif_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.crc_verif_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(crc_verif_sptr self) -> long"""
        return _lora_sdr_swig.crc_verif_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(crc_verif_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.crc_verif_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(crc_verif_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.crc_verif_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(crc_verif_sptr self) -> std::string"""
        return _lora_sdr_swig.crc_verif_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(crc_verif_sptr self, std::string name)"""
        return _lora_sdr_swig.crc_verif_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(crc_verif_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.crc_verif_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(crc_verif_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.crc_verif_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(crc_verif_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.crc_verif_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(crc_verif_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.crc_verif_sptr_message_subscribers(self, which_port)

# Register crc_verif_sptr in _lora_sdr_swig:
_lora_sdr_swig.crc_verif_sptr_swigregister(crc_verif_sptr)


crc_verif_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
crc_verif = crc_verif.make;

class whitening(object):
    r"""
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::whitening.

    To avoid accidental use of raw pointers, lora_sdr::whitening's constructor is in a private implementation class. lora_sdr::whitening::make is the public interface for creating new instances.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::lora_sdr::whitening::sptr":
        r"""
        make() -> whitening_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::whitening.

        To avoid accidental use of raw pointers, lora_sdr::whitening's constructor is in a private implementation class. lora_sdr::whitening::make is the public interface for creating new instances.
        """
        return _lora_sdr_swig.whitening_make()
    __swig_destroy__ = _lora_sdr_swig.delete_whitening

# Register whitening in _lora_sdr_swig:
_lora_sdr_swig.whitening_swigregister(whitening)

def whitening_make() -> "gr::lora_sdr::whitening::sptr":
    r"""
    whitening_make() -> whitening_sptr
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::whitening.

    To avoid accidental use of raw pointers, lora_sdr::whitening's constructor is in a private implementation class. lora_sdr::whitening::make is the public interface for creating new instances.
    """
    return _lora_sdr_swig.whitening_make()

class whitening_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::whitening > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(whitening_sptr self) -> whitening_sptr
        __init__(whitening_sptr self, whitening p) -> whitening_sptr
        """
        _lora_sdr_swig.whitening_sptr_swiginit(self, _lora_sdr_swig.new_whitening_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::whitening *":
        r"""__deref__(whitening_sptr self) -> whitening"""
        return _lora_sdr_swig.whitening_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_whitening_sptr

    def make(self) -> "gr::lora_sdr::whitening::sptr":
        r"""
        make(whitening_sptr self) -> whitening_sptr
        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::whitening.

        To avoid accidental use of raw pointers, lora_sdr::whitening's constructor is in a private implementation class. lora_sdr::whitening::make is the public interface for creating new instances.
        """
        return _lora_sdr_swig.whitening_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(whitening_sptr self) -> unsigned int"""
        return _lora_sdr_swig.whitening_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(whitening_sptr self, int which, int delay)
        declare_sample_delay(whitening_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.whitening_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(whitening_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.whitening_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(whitening_sptr self, int multiple)"""
        return _lora_sdr_swig.whitening_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(whitening_sptr self) -> int"""
        return _lora_sdr_swig.whitening_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(whitening_sptr self) -> double"""
        return _lora_sdr_swig.whitening_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(whitening_sptr self) -> uint64_t"""
        return _lora_sdr_swig.whitening_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(whitening_sptr self) -> uint64_t"""
        return _lora_sdr_swig.whitening_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(whitening_sptr self) -> bool"""
        return _lora_sdr_swig.whitening_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(whitening_sptr self) -> bool"""
        return _lora_sdr_swig.whitening_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(whitening_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.whitening_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(whitening_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.whitening_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(whitening_sptr self, std::string level)"""
        return _lora_sdr_swig.whitening_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(whitening_sptr self) -> std::string"""
        return _lora_sdr_swig.whitening_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(whitening_sptr self) -> int"""
        return _lora_sdr_swig.whitening_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(whitening_sptr self, int m)"""
        return _lora_sdr_swig.whitening_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(whitening_sptr self)"""
        return _lora_sdr_swig.whitening_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(whitening_sptr self) -> bool"""
        return _lora_sdr_swig.whitening_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(whitening_sptr self, int m)"""
        return _lora_sdr_swig.whitening_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(whitening_sptr self) -> int"""
        return _lora_sdr_swig.whitening_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(whitening_sptr self, int i) -> long"""
        return _lora_sdr_swig.whitening_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(whitening_sptr self, long max_output_buffer)
        set_max_output_buffer(whitening_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.whitening_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(whitening_sptr self, int i) -> long"""
        return _lora_sdr_swig.whitening_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(whitening_sptr self, long min_output_buffer)
        set_min_output_buffer(whitening_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.whitening_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(whitening_sptr self) -> float"""
        return _lora_sdr_swig.whitening_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(whitening_sptr self) -> float"""
        return _lora_sdr_swig.whitening_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(whitening_sptr self) -> float"""
        return _lora_sdr_swig.whitening_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(whitening_sptr self) -> float"""
        return _lora_sdr_swig.whitening_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(whitening_sptr self) -> float"""
        return _lora_sdr_swig.whitening_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(whitening_sptr self) -> float"""
        return _lora_sdr_swig.whitening_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(whitening_sptr self, int which) -> float
        pc_input_buffers_full(whitening_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.whitening_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(whitening_sptr self, int which) -> float
        pc_input_buffers_full_avg(whitening_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.whitening_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(whitening_sptr self, int which) -> float
        pc_input_buffers_full_var(whitening_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.whitening_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(whitening_sptr self, int which) -> float
        pc_output_buffers_full(whitening_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.whitening_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(whitening_sptr self, int which) -> float
        pc_output_buffers_full_avg(whitening_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.whitening_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(whitening_sptr self, int which) -> float
        pc_output_buffers_full_var(whitening_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.whitening_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(whitening_sptr self) -> float"""
        return _lora_sdr_swig.whitening_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(whitening_sptr self) -> float"""
        return _lora_sdr_swig.whitening_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(whitening_sptr self) -> float"""
        return _lora_sdr_swig.whitening_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(whitening_sptr self) -> float"""
        return _lora_sdr_swig.whitening_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(whitening_sptr self) -> float"""
        return _lora_sdr_swig.whitening_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(whitening_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.whitening_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(whitening_sptr self)"""
        return _lora_sdr_swig.whitening_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(whitening_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.whitening_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(whitening_sptr self) -> int"""
        return _lora_sdr_swig.whitening_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(whitening_sptr self) -> int"""
        return _lora_sdr_swig.whitening_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(whitening_sptr self, int priority) -> int"""
        return _lora_sdr_swig.whitening_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(whitening_sptr self) -> std::string"""
        return _lora_sdr_swig.whitening_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(whitening_sptr self) -> std::string"""
        return _lora_sdr_swig.whitening_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(whitening_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.whitening_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(whitening_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.whitening_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(whitening_sptr self) -> long"""
        return _lora_sdr_swig.whitening_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(whitening_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.whitening_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(whitening_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.whitening_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(whitening_sptr self) -> std::string"""
        return _lora_sdr_swig.whitening_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(whitening_sptr self, std::string name)"""
        return _lora_sdr_swig.whitening_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(whitening_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.whitening_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(whitening_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.whitening_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(whitening_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.whitening_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(whitening_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.whitening_sptr_message_subscribers(self, which_port)

# Register whitening_sptr in _lora_sdr_swig:
_lora_sdr_swig.whitening_sptr_swigregister(whitening_sptr)


whitening_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
whitening = whitening.make;

class dewhitening(object):
    r"""
    Dewhites the received payload, for more information about the implementation visit crc_verify_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::dewhitening.

    To avoid accidental use of raw pointers, lora_sdr::dewhitening's constructor is in a private implementation class. lora_sdr::dewhitening::make is the public interface for creating new instances.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::lora_sdr::dewhitening::sptr":
        r"""
        make() -> dewhitening_sptr
        Dewhites the received payload, for more information about the implementation visit crc_verify_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::dewhitening.

        To avoid accidental use of raw pointers, lora_sdr::dewhitening's constructor is in a private implementation class. lora_sdr::dewhitening::make is the public interface for creating new instances.
        """
        return _lora_sdr_swig.dewhitening_make()
    __swig_destroy__ = _lora_sdr_swig.delete_dewhitening

# Register dewhitening in _lora_sdr_swig:
_lora_sdr_swig.dewhitening_swigregister(dewhitening)

def dewhitening_make() -> "gr::lora_sdr::dewhitening::sptr":
    r"""
    dewhitening_make() -> dewhitening_sptr
    Dewhites the received payload, for more information about the implementation visit crc_verify_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::dewhitening.

    To avoid accidental use of raw pointers, lora_sdr::dewhitening's constructor is in a private implementation class. lora_sdr::dewhitening::make is the public interface for creating new instances.
    """
    return _lora_sdr_swig.dewhitening_make()

class dewhitening_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::dewhitening > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(dewhitening_sptr self) -> dewhitening_sptr
        __init__(dewhitening_sptr self, dewhitening p) -> dewhitening_sptr
        """
        _lora_sdr_swig.dewhitening_sptr_swiginit(self, _lora_sdr_swig.new_dewhitening_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::dewhitening *":
        r"""__deref__(dewhitening_sptr self) -> dewhitening"""
        return _lora_sdr_swig.dewhitening_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_dewhitening_sptr

    def make(self) -> "gr::lora_sdr::dewhitening::sptr":
        r"""
        make(dewhitening_sptr self) -> dewhitening_sptr
        Dewhites the received payload, for more information about the implementation visit crc_verify_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::dewhitening.

        To avoid accidental use of raw pointers, lora_sdr::dewhitening's constructor is in a private implementation class. lora_sdr::dewhitening::make is the public interface for creating new instances.
        """
        return _lora_sdr_swig.dewhitening_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(dewhitening_sptr self) -> unsigned int"""
        return _lora_sdr_swig.dewhitening_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(dewhitening_sptr self, int which, int delay)
        declare_sample_delay(dewhitening_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.dewhitening_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(dewhitening_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.dewhitening_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(dewhitening_sptr self, int multiple)"""
        return _lora_sdr_swig.dewhitening_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(dewhitening_sptr self) -> int"""
        return _lora_sdr_swig.dewhitening_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(dewhitening_sptr self) -> double"""
        return _lora_sdr_swig.dewhitening_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(dewhitening_sptr self) -> uint64_t"""
        return _lora_sdr_swig.dewhitening_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(dewhitening_sptr self) -> uint64_t"""
        return _lora_sdr_swig.dewhitening_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(dewhitening_sptr self) -> bool"""
        return _lora_sdr_swig.dewhitening_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(dewhitening_sptr self) -> bool"""
        return _lora_sdr_swig.dewhitening_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(dewhitening_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.dewhitening_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(dewhitening_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.dewhitening_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(dewhitening_sptr self, std::string level)"""
        return _lora_sdr_swig.dewhitening_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(dewhitening_sptr self) -> std::string"""
        return _lora_sdr_swig.dewhitening_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(dewhitening_sptr self) -> int"""
        return _lora_sdr_swig.dewhitening_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(dewhitening_sptr self, int m)"""
        return _lora_sdr_swig.dewhitening_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(dewhitening_sptr self)"""
        return _lora_sdr_swig.dewhitening_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(dewhitening_sptr self) -> bool"""
        return _lora_sdr_swig.dewhitening_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(dewhitening_sptr self, int m)"""
        return _lora_sdr_swig.dewhitening_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(dewhitening_sptr self) -> int"""
        return _lora_sdr_swig.dewhitening_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(dewhitening_sptr self, int i) -> long"""
        return _lora_sdr_swig.dewhitening_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(dewhitening_sptr self, long max_output_buffer)
        set_max_output_buffer(dewhitening_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.dewhitening_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(dewhitening_sptr self, int i) -> long"""
        return _lora_sdr_swig.dewhitening_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(dewhitening_sptr self, long min_output_buffer)
        set_min_output_buffer(dewhitening_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.dewhitening_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(dewhitening_sptr self) -> float"""
        return _lora_sdr_swig.dewhitening_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(dewhitening_sptr self) -> float"""
        return _lora_sdr_swig.dewhitening_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(dewhitening_sptr self) -> float"""
        return _lora_sdr_swig.dewhitening_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(dewhitening_sptr self) -> float"""
        return _lora_sdr_swig.dewhitening_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(dewhitening_sptr self) -> float"""
        return _lora_sdr_swig.dewhitening_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(dewhitening_sptr self) -> float"""
        return _lora_sdr_swig.dewhitening_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(dewhitening_sptr self, int which) -> float
        pc_input_buffers_full(dewhitening_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.dewhitening_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(dewhitening_sptr self, int which) -> float
        pc_input_buffers_full_avg(dewhitening_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.dewhitening_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(dewhitening_sptr self, int which) -> float
        pc_input_buffers_full_var(dewhitening_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.dewhitening_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(dewhitening_sptr self, int which) -> float
        pc_output_buffers_full(dewhitening_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.dewhitening_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(dewhitening_sptr self, int which) -> float
        pc_output_buffers_full_avg(dewhitening_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.dewhitening_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(dewhitening_sptr self, int which) -> float
        pc_output_buffers_full_var(dewhitening_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.dewhitening_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(dewhitening_sptr self) -> float"""
        return _lora_sdr_swig.dewhitening_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(dewhitening_sptr self) -> float"""
        return _lora_sdr_swig.dewhitening_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(dewhitening_sptr self) -> float"""
        return _lora_sdr_swig.dewhitening_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(dewhitening_sptr self) -> float"""
        return _lora_sdr_swig.dewhitening_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(dewhitening_sptr self) -> float"""
        return _lora_sdr_swig.dewhitening_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(dewhitening_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.dewhitening_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(dewhitening_sptr self)"""
        return _lora_sdr_swig.dewhitening_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(dewhitening_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.dewhitening_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(dewhitening_sptr self) -> int"""
        return _lora_sdr_swig.dewhitening_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(dewhitening_sptr self) -> int"""
        return _lora_sdr_swig.dewhitening_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(dewhitening_sptr self, int priority) -> int"""
        return _lora_sdr_swig.dewhitening_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(dewhitening_sptr self) -> std::string"""
        return _lora_sdr_swig.dewhitening_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(dewhitening_sptr self) -> std::string"""
        return _lora_sdr_swig.dewhitening_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(dewhitening_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.dewhitening_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(dewhitening_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.dewhitening_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(dewhitening_sptr self) -> long"""
        return _lora_sdr_swig.dewhitening_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(dewhitening_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.dewhitening_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(dewhitening_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.dewhitening_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(dewhitening_sptr self) -> std::string"""
        return _lora_sdr_swig.dewhitening_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(dewhitening_sptr self, std::string name)"""
        return _lora_sdr_swig.dewhitening_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(dewhitening_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.dewhitening_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(dewhitening_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.dewhitening_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(dewhitening_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.dewhitening_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(dewhitening_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.dewhitening_sptr_message_subscribers(self, which_port)

# Register dewhitening_sptr in _lora_sdr_swig:
_lora_sdr_swig.dewhitening_sptr_swigregister(dewhitening_sptr)


dewhitening_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dewhitening = dewhitening.make;

class gray_decode(object):
    r"""
    Decode the received payload with the inverse gray mapping in order to obtain the send message. For more information about the implementation visit gray_decode_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::gray_decode.

    To avoid accidental use of raw pointers, lora_sdr::gray_decode's constructor is in a private implementation class. lora_sdr::gray_decode::make is the public interface for creating new instances.

    Args:
        sf : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(sf: "uint8_t") -> "gr::lora_sdr::gray_decode::sptr":
        r"""
        make(uint8_t sf) -> gray_decode_sptr
        Decode the received payload with the inverse gray mapping in order to obtain the send message. For more information about the implementation visit gray_decode_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::gray_decode.

        To avoid accidental use of raw pointers, lora_sdr::gray_decode's constructor is in a private implementation class. lora_sdr::gray_decode::make is the public interface for creating new instances.

        Args:
            sf : 
        """
        return _lora_sdr_swig.gray_decode_make(sf)
    __swig_destroy__ = _lora_sdr_swig.delete_gray_decode

# Register gray_decode in _lora_sdr_swig:
_lora_sdr_swig.gray_decode_swigregister(gray_decode)

def gray_decode_make(sf: "uint8_t") -> "gr::lora_sdr::gray_decode::sptr":
    r"""
    gray_decode_make(uint8_t sf) -> gray_decode_sptr
    Decode the received payload with the inverse gray mapping in order to obtain the send message. For more information about the implementation visit gray_decode_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::gray_decode.

    To avoid accidental use of raw pointers, lora_sdr::gray_decode's constructor is in a private implementation class. lora_sdr::gray_decode::make is the public interface for creating new instances.

    Args:
        sf : 
    """
    return _lora_sdr_swig.gray_decode_make(sf)

class gray_decode_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::gray_decode > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(gray_decode_sptr self) -> gray_decode_sptr
        __init__(gray_decode_sptr self, gray_decode p) -> gray_decode_sptr
        """
        _lora_sdr_swig.gray_decode_sptr_swiginit(self, _lora_sdr_swig.new_gray_decode_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::gray_decode *":
        r"""__deref__(gray_decode_sptr self) -> gray_decode"""
        return _lora_sdr_swig.gray_decode_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_gray_decode_sptr

    def make(self, sf: "uint8_t") -> "gr::lora_sdr::gray_decode::sptr":
        r"""
        make(gray_decode_sptr self, uint8_t sf) -> gray_decode_sptr
        Decode the received payload with the inverse gray mapping in order to obtain the send message. For more information about the implementation visit gray_decode_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::gray_decode.

        To avoid accidental use of raw pointers, lora_sdr::gray_decode's constructor is in a private implementation class. lora_sdr::gray_decode::make is the public interface for creating new instances.

        Args:
            sf : 
        """
        return _lora_sdr_swig.gray_decode_sptr_make(self, sf)

    def history(self) -> "unsigned int":
        r"""history(gray_decode_sptr self) -> unsigned int"""
        return _lora_sdr_swig.gray_decode_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(gray_decode_sptr self, int which, int delay)
        declare_sample_delay(gray_decode_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.gray_decode_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(gray_decode_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.gray_decode_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(gray_decode_sptr self, int multiple)"""
        return _lora_sdr_swig.gray_decode_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(gray_decode_sptr self) -> int"""
        return _lora_sdr_swig.gray_decode_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(gray_decode_sptr self) -> double"""
        return _lora_sdr_swig.gray_decode_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(gray_decode_sptr self) -> uint64_t"""
        return _lora_sdr_swig.gray_decode_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(gray_decode_sptr self) -> uint64_t"""
        return _lora_sdr_swig.gray_decode_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(gray_decode_sptr self) -> bool"""
        return _lora_sdr_swig.gray_decode_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(gray_decode_sptr self) -> bool"""
        return _lora_sdr_swig.gray_decode_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(gray_decode_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.gray_decode_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(gray_decode_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.gray_decode_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(gray_decode_sptr self, std::string level)"""
        return _lora_sdr_swig.gray_decode_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(gray_decode_sptr self) -> std::string"""
        return _lora_sdr_swig.gray_decode_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(gray_decode_sptr self) -> int"""
        return _lora_sdr_swig.gray_decode_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(gray_decode_sptr self, int m)"""
        return _lora_sdr_swig.gray_decode_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(gray_decode_sptr self)"""
        return _lora_sdr_swig.gray_decode_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(gray_decode_sptr self) -> bool"""
        return _lora_sdr_swig.gray_decode_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(gray_decode_sptr self, int m)"""
        return _lora_sdr_swig.gray_decode_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(gray_decode_sptr self) -> int"""
        return _lora_sdr_swig.gray_decode_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(gray_decode_sptr self, int i) -> long"""
        return _lora_sdr_swig.gray_decode_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(gray_decode_sptr self, long max_output_buffer)
        set_max_output_buffer(gray_decode_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.gray_decode_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(gray_decode_sptr self, int i) -> long"""
        return _lora_sdr_swig.gray_decode_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(gray_decode_sptr self, long min_output_buffer)
        set_min_output_buffer(gray_decode_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.gray_decode_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(gray_decode_sptr self) -> float"""
        return _lora_sdr_swig.gray_decode_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(gray_decode_sptr self) -> float"""
        return _lora_sdr_swig.gray_decode_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(gray_decode_sptr self) -> float"""
        return _lora_sdr_swig.gray_decode_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(gray_decode_sptr self) -> float"""
        return _lora_sdr_swig.gray_decode_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(gray_decode_sptr self) -> float"""
        return _lora_sdr_swig.gray_decode_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(gray_decode_sptr self) -> float"""
        return _lora_sdr_swig.gray_decode_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(gray_decode_sptr self, int which) -> float
        pc_input_buffers_full(gray_decode_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.gray_decode_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(gray_decode_sptr self, int which) -> float
        pc_input_buffers_full_avg(gray_decode_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.gray_decode_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(gray_decode_sptr self, int which) -> float
        pc_input_buffers_full_var(gray_decode_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.gray_decode_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(gray_decode_sptr self, int which) -> float
        pc_output_buffers_full(gray_decode_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.gray_decode_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(gray_decode_sptr self, int which) -> float
        pc_output_buffers_full_avg(gray_decode_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.gray_decode_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(gray_decode_sptr self, int which) -> float
        pc_output_buffers_full_var(gray_decode_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.gray_decode_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(gray_decode_sptr self) -> float"""
        return _lora_sdr_swig.gray_decode_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(gray_decode_sptr self) -> float"""
        return _lora_sdr_swig.gray_decode_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(gray_decode_sptr self) -> float"""
        return _lora_sdr_swig.gray_decode_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(gray_decode_sptr self) -> float"""
        return _lora_sdr_swig.gray_decode_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(gray_decode_sptr self) -> float"""
        return _lora_sdr_swig.gray_decode_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(gray_decode_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.gray_decode_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(gray_decode_sptr self)"""
        return _lora_sdr_swig.gray_decode_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(gray_decode_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.gray_decode_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(gray_decode_sptr self) -> int"""
        return _lora_sdr_swig.gray_decode_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(gray_decode_sptr self) -> int"""
        return _lora_sdr_swig.gray_decode_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(gray_decode_sptr self, int priority) -> int"""
        return _lora_sdr_swig.gray_decode_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(gray_decode_sptr self) -> std::string"""
        return _lora_sdr_swig.gray_decode_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(gray_decode_sptr self) -> std::string"""
        return _lora_sdr_swig.gray_decode_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(gray_decode_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.gray_decode_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(gray_decode_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.gray_decode_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(gray_decode_sptr self) -> long"""
        return _lora_sdr_swig.gray_decode_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(gray_decode_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.gray_decode_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(gray_decode_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.gray_decode_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(gray_decode_sptr self) -> std::string"""
        return _lora_sdr_swig.gray_decode_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(gray_decode_sptr self, std::string name)"""
        return _lora_sdr_swig.gray_decode_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(gray_decode_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.gray_decode_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(gray_decode_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.gray_decode_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(gray_decode_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.gray_decode_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(gray_decode_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.gray_decode_sptr_message_subscribers(self, which_port)

# Register gray_decode_sptr in _lora_sdr_swig:
_lora_sdr_swig.gray_decode_sptr_swigregister(gray_decode_sptr)


gray_decode_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
gray_decode = gray_decode.make;

class gray_enc(object):
    r"""
    Modulate the payload with an Gray map. This ensures that bits are modulated such that two subsequent symbols differ one bit. For more information about the implementation visit gray_enc_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::gray_enc.

    To avoid accidental use of raw pointers, lora_sdr::gray_enc's constructor is in a private implementation class. lora_sdr::gray_enc::make is the public interface for creating new instances.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::lora_sdr::gray_enc::sptr":
        r"""
        make() -> gray_enc_sptr
        Modulate the payload with an Gray map. This ensures that bits are modulated such that two subsequent symbols differ one bit. For more information about the implementation visit gray_enc_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::gray_enc.

        To avoid accidental use of raw pointers, lora_sdr::gray_enc's constructor is in a private implementation class. lora_sdr::gray_enc::make is the public interface for creating new instances.
        """
        return _lora_sdr_swig.gray_enc_make()
    __swig_destroy__ = _lora_sdr_swig.delete_gray_enc

# Register gray_enc in _lora_sdr_swig:
_lora_sdr_swig.gray_enc_swigregister(gray_enc)

def gray_enc_make() -> "gr::lora_sdr::gray_enc::sptr":
    r"""
    gray_enc_make() -> gray_enc_sptr
    Modulate the payload with an Gray map. This ensures that bits are modulated such that two subsequent symbols differ one bit. For more information about the implementation visit gray_enc_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::gray_enc.

    To avoid accidental use of raw pointers, lora_sdr::gray_enc's constructor is in a private implementation class. lora_sdr::gray_enc::make is the public interface for creating new instances.
    """
    return _lora_sdr_swig.gray_enc_make()

class gray_enc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::gray_enc > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(gray_enc_sptr self) -> gray_enc_sptr
        __init__(gray_enc_sptr self, gray_enc p) -> gray_enc_sptr
        """
        _lora_sdr_swig.gray_enc_sptr_swiginit(self, _lora_sdr_swig.new_gray_enc_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::gray_enc *":
        r"""__deref__(gray_enc_sptr self) -> gray_enc"""
        return _lora_sdr_swig.gray_enc_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_gray_enc_sptr

    def make(self) -> "gr::lora_sdr::gray_enc::sptr":
        r"""
        make(gray_enc_sptr self) -> gray_enc_sptr
        Modulate the payload with an Gray map. This ensures that bits are modulated such that two subsequent symbols differ one bit. For more information about the implementation visit gray_enc_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::gray_enc.

        To avoid accidental use of raw pointers, lora_sdr::gray_enc's constructor is in a private implementation class. lora_sdr::gray_enc::make is the public interface for creating new instances.
        """
        return _lora_sdr_swig.gray_enc_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(gray_enc_sptr self) -> unsigned int"""
        return _lora_sdr_swig.gray_enc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(gray_enc_sptr self, int which, int delay)
        declare_sample_delay(gray_enc_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.gray_enc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(gray_enc_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.gray_enc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(gray_enc_sptr self, int multiple)"""
        return _lora_sdr_swig.gray_enc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(gray_enc_sptr self) -> int"""
        return _lora_sdr_swig.gray_enc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(gray_enc_sptr self) -> double"""
        return _lora_sdr_swig.gray_enc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(gray_enc_sptr self) -> uint64_t"""
        return _lora_sdr_swig.gray_enc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(gray_enc_sptr self) -> uint64_t"""
        return _lora_sdr_swig.gray_enc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(gray_enc_sptr self) -> bool"""
        return _lora_sdr_swig.gray_enc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(gray_enc_sptr self) -> bool"""
        return _lora_sdr_swig.gray_enc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(gray_enc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.gray_enc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(gray_enc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.gray_enc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(gray_enc_sptr self, std::string level)"""
        return _lora_sdr_swig.gray_enc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(gray_enc_sptr self) -> std::string"""
        return _lora_sdr_swig.gray_enc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(gray_enc_sptr self) -> int"""
        return _lora_sdr_swig.gray_enc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(gray_enc_sptr self, int m)"""
        return _lora_sdr_swig.gray_enc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(gray_enc_sptr self)"""
        return _lora_sdr_swig.gray_enc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(gray_enc_sptr self) -> bool"""
        return _lora_sdr_swig.gray_enc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(gray_enc_sptr self, int m)"""
        return _lora_sdr_swig.gray_enc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(gray_enc_sptr self) -> int"""
        return _lora_sdr_swig.gray_enc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(gray_enc_sptr self, int i) -> long"""
        return _lora_sdr_swig.gray_enc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(gray_enc_sptr self, long max_output_buffer)
        set_max_output_buffer(gray_enc_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.gray_enc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(gray_enc_sptr self, int i) -> long"""
        return _lora_sdr_swig.gray_enc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(gray_enc_sptr self, long min_output_buffer)
        set_min_output_buffer(gray_enc_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.gray_enc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(gray_enc_sptr self) -> float"""
        return _lora_sdr_swig.gray_enc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(gray_enc_sptr self) -> float"""
        return _lora_sdr_swig.gray_enc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(gray_enc_sptr self) -> float"""
        return _lora_sdr_swig.gray_enc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(gray_enc_sptr self) -> float"""
        return _lora_sdr_swig.gray_enc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(gray_enc_sptr self) -> float"""
        return _lora_sdr_swig.gray_enc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(gray_enc_sptr self) -> float"""
        return _lora_sdr_swig.gray_enc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(gray_enc_sptr self, int which) -> float
        pc_input_buffers_full(gray_enc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.gray_enc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(gray_enc_sptr self, int which) -> float
        pc_input_buffers_full_avg(gray_enc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.gray_enc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(gray_enc_sptr self, int which) -> float
        pc_input_buffers_full_var(gray_enc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.gray_enc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(gray_enc_sptr self, int which) -> float
        pc_output_buffers_full(gray_enc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.gray_enc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(gray_enc_sptr self, int which) -> float
        pc_output_buffers_full_avg(gray_enc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.gray_enc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(gray_enc_sptr self, int which) -> float
        pc_output_buffers_full_var(gray_enc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.gray_enc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(gray_enc_sptr self) -> float"""
        return _lora_sdr_swig.gray_enc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(gray_enc_sptr self) -> float"""
        return _lora_sdr_swig.gray_enc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(gray_enc_sptr self) -> float"""
        return _lora_sdr_swig.gray_enc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(gray_enc_sptr self) -> float"""
        return _lora_sdr_swig.gray_enc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(gray_enc_sptr self) -> float"""
        return _lora_sdr_swig.gray_enc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(gray_enc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.gray_enc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(gray_enc_sptr self)"""
        return _lora_sdr_swig.gray_enc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(gray_enc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.gray_enc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(gray_enc_sptr self) -> int"""
        return _lora_sdr_swig.gray_enc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(gray_enc_sptr self) -> int"""
        return _lora_sdr_swig.gray_enc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(gray_enc_sptr self, int priority) -> int"""
        return _lora_sdr_swig.gray_enc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(gray_enc_sptr self) -> std::string"""
        return _lora_sdr_swig.gray_enc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(gray_enc_sptr self) -> std::string"""
        return _lora_sdr_swig.gray_enc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(gray_enc_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.gray_enc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(gray_enc_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.gray_enc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(gray_enc_sptr self) -> long"""
        return _lora_sdr_swig.gray_enc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(gray_enc_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.gray_enc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(gray_enc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.gray_enc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(gray_enc_sptr self) -> std::string"""
        return _lora_sdr_swig.gray_enc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(gray_enc_sptr self, std::string name)"""
        return _lora_sdr_swig.gray_enc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(gray_enc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.gray_enc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(gray_enc_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.gray_enc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(gray_enc_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.gray_enc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(gray_enc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.gray_enc_sptr_message_subscribers(self, which_port)

# Register gray_enc_sptr in _lora_sdr_swig:
_lora_sdr_swig.gray_enc_sptr_swigregister(gray_enc_sptr)


gray_enc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
gray_enc = gray_enc.make;

class hamming_dec(object):
    r"""
    Hamming decoding stage, decode the received payload. If necessary this block will preform error detection and correction using the hamming code parity bits. For more information about the implementation visit hamming_dec_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::hamming_dec.

    To avoid accidental use of raw pointers, lora_sdr::hamming_dec's constructor is in a private implementation class. lora_sdr::hamming_dec::make is the public interface for creating new instances.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::lora_sdr::hamming_dec::sptr":
        r"""
        make() -> hamming_dec_sptr
        Hamming decoding stage, decode the received payload. If necessary this block will preform error detection and correction using the hamming code parity bits. For more information about the implementation visit hamming_dec_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::hamming_dec.

        To avoid accidental use of raw pointers, lora_sdr::hamming_dec's constructor is in a private implementation class. lora_sdr::hamming_dec::make is the public interface for creating new instances.
        """
        return _lora_sdr_swig.hamming_dec_make()
    __swig_destroy__ = _lora_sdr_swig.delete_hamming_dec

# Register hamming_dec in _lora_sdr_swig:
_lora_sdr_swig.hamming_dec_swigregister(hamming_dec)

def hamming_dec_make() -> "gr::lora_sdr::hamming_dec::sptr":
    r"""
    hamming_dec_make() -> hamming_dec_sptr
    Hamming decoding stage, decode the received payload. If necessary this block will preform error detection and correction using the hamming code parity bits. For more information about the implementation visit hamming_dec_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::hamming_dec.

    To avoid accidental use of raw pointers, lora_sdr::hamming_dec's constructor is in a private implementation class. lora_sdr::hamming_dec::make is the public interface for creating new instances.
    """
    return _lora_sdr_swig.hamming_dec_make()

class hamming_dec_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::hamming_dec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(hamming_dec_sptr self) -> hamming_dec_sptr
        __init__(hamming_dec_sptr self, hamming_dec p) -> hamming_dec_sptr
        """
        _lora_sdr_swig.hamming_dec_sptr_swiginit(self, _lora_sdr_swig.new_hamming_dec_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::hamming_dec *":
        r"""__deref__(hamming_dec_sptr self) -> hamming_dec"""
        return _lora_sdr_swig.hamming_dec_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_hamming_dec_sptr

    def make(self) -> "gr::lora_sdr::hamming_dec::sptr":
        r"""
        make(hamming_dec_sptr self) -> hamming_dec_sptr
        Hamming decoding stage, decode the received payload. If necessary this block will preform error detection and correction using the hamming code parity bits. For more information about the implementation visit hamming_dec_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::hamming_dec.

        To avoid accidental use of raw pointers, lora_sdr::hamming_dec's constructor is in a private implementation class. lora_sdr::hamming_dec::make is the public interface for creating new instances.
        """
        return _lora_sdr_swig.hamming_dec_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(hamming_dec_sptr self) -> unsigned int"""
        return _lora_sdr_swig.hamming_dec_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(hamming_dec_sptr self, int which, int delay)
        declare_sample_delay(hamming_dec_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.hamming_dec_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(hamming_dec_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.hamming_dec_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(hamming_dec_sptr self, int multiple)"""
        return _lora_sdr_swig.hamming_dec_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(hamming_dec_sptr self) -> int"""
        return _lora_sdr_swig.hamming_dec_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(hamming_dec_sptr self) -> double"""
        return _lora_sdr_swig.hamming_dec_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(hamming_dec_sptr self) -> uint64_t"""
        return _lora_sdr_swig.hamming_dec_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(hamming_dec_sptr self) -> uint64_t"""
        return _lora_sdr_swig.hamming_dec_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(hamming_dec_sptr self) -> bool"""
        return _lora_sdr_swig.hamming_dec_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(hamming_dec_sptr self) -> bool"""
        return _lora_sdr_swig.hamming_dec_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(hamming_dec_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.hamming_dec_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(hamming_dec_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.hamming_dec_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(hamming_dec_sptr self, std::string level)"""
        return _lora_sdr_swig.hamming_dec_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(hamming_dec_sptr self) -> std::string"""
        return _lora_sdr_swig.hamming_dec_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(hamming_dec_sptr self) -> int"""
        return _lora_sdr_swig.hamming_dec_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(hamming_dec_sptr self, int m)"""
        return _lora_sdr_swig.hamming_dec_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(hamming_dec_sptr self)"""
        return _lora_sdr_swig.hamming_dec_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(hamming_dec_sptr self) -> bool"""
        return _lora_sdr_swig.hamming_dec_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(hamming_dec_sptr self, int m)"""
        return _lora_sdr_swig.hamming_dec_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(hamming_dec_sptr self) -> int"""
        return _lora_sdr_swig.hamming_dec_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(hamming_dec_sptr self, int i) -> long"""
        return _lora_sdr_swig.hamming_dec_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(hamming_dec_sptr self, long max_output_buffer)
        set_max_output_buffer(hamming_dec_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.hamming_dec_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(hamming_dec_sptr self, int i) -> long"""
        return _lora_sdr_swig.hamming_dec_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(hamming_dec_sptr self, long min_output_buffer)
        set_min_output_buffer(hamming_dec_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.hamming_dec_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(hamming_dec_sptr self) -> float"""
        return _lora_sdr_swig.hamming_dec_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(hamming_dec_sptr self) -> float"""
        return _lora_sdr_swig.hamming_dec_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(hamming_dec_sptr self) -> float"""
        return _lora_sdr_swig.hamming_dec_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(hamming_dec_sptr self) -> float"""
        return _lora_sdr_swig.hamming_dec_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(hamming_dec_sptr self) -> float"""
        return _lora_sdr_swig.hamming_dec_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(hamming_dec_sptr self) -> float"""
        return _lora_sdr_swig.hamming_dec_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(hamming_dec_sptr self, int which) -> float
        pc_input_buffers_full(hamming_dec_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.hamming_dec_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(hamming_dec_sptr self, int which) -> float
        pc_input_buffers_full_avg(hamming_dec_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.hamming_dec_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(hamming_dec_sptr self, int which) -> float
        pc_input_buffers_full_var(hamming_dec_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.hamming_dec_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(hamming_dec_sptr self, int which) -> float
        pc_output_buffers_full(hamming_dec_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.hamming_dec_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(hamming_dec_sptr self, int which) -> float
        pc_output_buffers_full_avg(hamming_dec_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.hamming_dec_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(hamming_dec_sptr self, int which) -> float
        pc_output_buffers_full_var(hamming_dec_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.hamming_dec_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(hamming_dec_sptr self) -> float"""
        return _lora_sdr_swig.hamming_dec_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(hamming_dec_sptr self) -> float"""
        return _lora_sdr_swig.hamming_dec_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(hamming_dec_sptr self) -> float"""
        return _lora_sdr_swig.hamming_dec_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(hamming_dec_sptr self) -> float"""
        return _lora_sdr_swig.hamming_dec_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(hamming_dec_sptr self) -> float"""
        return _lora_sdr_swig.hamming_dec_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(hamming_dec_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.hamming_dec_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(hamming_dec_sptr self)"""
        return _lora_sdr_swig.hamming_dec_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(hamming_dec_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.hamming_dec_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(hamming_dec_sptr self) -> int"""
        return _lora_sdr_swig.hamming_dec_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(hamming_dec_sptr self) -> int"""
        return _lora_sdr_swig.hamming_dec_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(hamming_dec_sptr self, int priority) -> int"""
        return _lora_sdr_swig.hamming_dec_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(hamming_dec_sptr self) -> std::string"""
        return _lora_sdr_swig.hamming_dec_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(hamming_dec_sptr self) -> std::string"""
        return _lora_sdr_swig.hamming_dec_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(hamming_dec_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.hamming_dec_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(hamming_dec_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.hamming_dec_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(hamming_dec_sptr self) -> long"""
        return _lora_sdr_swig.hamming_dec_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(hamming_dec_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.hamming_dec_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(hamming_dec_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.hamming_dec_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(hamming_dec_sptr self) -> std::string"""
        return _lora_sdr_swig.hamming_dec_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(hamming_dec_sptr self, std::string name)"""
        return _lora_sdr_swig.hamming_dec_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(hamming_dec_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.hamming_dec_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(hamming_dec_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.hamming_dec_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(hamming_dec_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.hamming_dec_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(hamming_dec_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.hamming_dec_sptr_message_subscribers(self, which_port)

# Register hamming_dec_sptr in _lora_sdr_swig:
_lora_sdr_swig.hamming_dec_sptr_swigregister(hamming_dec_sptr)


hamming_dec_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hamming_dec = hamming_dec.make;

class hamming_enc(object):
    r"""
    Add hamming code to the to be sent playload. This means extra party bits are added to the payload to be able to recover from bit errors during transmission For more information about the implementation visit hamming_enc_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::hamming_enc.

    To avoid accidental use of raw pointers, lora_sdr::hamming_enc's constructor is in a private implementation class. lora_sdr::hamming_enc::make is the public interface for creating new instances.

    Args:
        cr : 
        sf : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(cr: "uint8_t", sf: "uint8_t") -> "gr::lora_sdr::hamming_enc::sptr":
        r"""
        make(uint8_t cr, uint8_t sf) -> hamming_enc_sptr
        Add hamming code to the to be sent playload. This means extra party bits are added to the payload to be able to recover from bit errors during transmission For more information about the implementation visit hamming_enc_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::hamming_enc.

        To avoid accidental use of raw pointers, lora_sdr::hamming_enc's constructor is in a private implementation class. lora_sdr::hamming_enc::make is the public interface for creating new instances.

        Args:
            cr : 
            sf : 
        """
        return _lora_sdr_swig.hamming_enc_make(cr, sf)
    __swig_destroy__ = _lora_sdr_swig.delete_hamming_enc

# Register hamming_enc in _lora_sdr_swig:
_lora_sdr_swig.hamming_enc_swigregister(hamming_enc)

def hamming_enc_make(cr: "uint8_t", sf: "uint8_t") -> "gr::lora_sdr::hamming_enc::sptr":
    r"""
    hamming_enc_make(uint8_t cr, uint8_t sf) -> hamming_enc_sptr
    Add hamming code to the to be sent playload. This means extra party bits are added to the payload to be able to recover from bit errors during transmission For more information about the implementation visit hamming_enc_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::hamming_enc.

    To avoid accidental use of raw pointers, lora_sdr::hamming_enc's constructor is in a private implementation class. lora_sdr::hamming_enc::make is the public interface for creating new instances.

    Args:
        cr : 
        sf : 
    """
    return _lora_sdr_swig.hamming_enc_make(cr, sf)

class hamming_enc_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::hamming_enc > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(hamming_enc_sptr self) -> hamming_enc_sptr
        __init__(hamming_enc_sptr self, hamming_enc p) -> hamming_enc_sptr
        """
        _lora_sdr_swig.hamming_enc_sptr_swiginit(self, _lora_sdr_swig.new_hamming_enc_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::hamming_enc *":
        r"""__deref__(hamming_enc_sptr self) -> hamming_enc"""
        return _lora_sdr_swig.hamming_enc_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_hamming_enc_sptr

    def make(self, cr: "uint8_t", sf: "uint8_t") -> "gr::lora_sdr::hamming_enc::sptr":
        r"""
        make(hamming_enc_sptr self, uint8_t cr, uint8_t sf) -> hamming_enc_sptr
        Add hamming code to the to be sent playload. This means extra party bits are added to the payload to be able to recover from bit errors during transmission For more information about the implementation visit hamming_enc_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::hamming_enc.

        To avoid accidental use of raw pointers, lora_sdr::hamming_enc's constructor is in a private implementation class. lora_sdr::hamming_enc::make is the public interface for creating new instances.

        Args:
            cr : 
            sf : 
        """
        return _lora_sdr_swig.hamming_enc_sptr_make(self, cr, sf)

    def history(self) -> "unsigned int":
        r"""history(hamming_enc_sptr self) -> unsigned int"""
        return _lora_sdr_swig.hamming_enc_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(hamming_enc_sptr self, int which, int delay)
        declare_sample_delay(hamming_enc_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.hamming_enc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(hamming_enc_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.hamming_enc_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(hamming_enc_sptr self, int multiple)"""
        return _lora_sdr_swig.hamming_enc_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(hamming_enc_sptr self) -> int"""
        return _lora_sdr_swig.hamming_enc_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(hamming_enc_sptr self) -> double"""
        return _lora_sdr_swig.hamming_enc_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(hamming_enc_sptr self) -> uint64_t"""
        return _lora_sdr_swig.hamming_enc_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(hamming_enc_sptr self) -> uint64_t"""
        return _lora_sdr_swig.hamming_enc_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(hamming_enc_sptr self) -> bool"""
        return _lora_sdr_swig.hamming_enc_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(hamming_enc_sptr self) -> bool"""
        return _lora_sdr_swig.hamming_enc_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(hamming_enc_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.hamming_enc_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(hamming_enc_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.hamming_enc_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(hamming_enc_sptr self, std::string level)"""
        return _lora_sdr_swig.hamming_enc_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(hamming_enc_sptr self) -> std::string"""
        return _lora_sdr_swig.hamming_enc_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(hamming_enc_sptr self) -> int"""
        return _lora_sdr_swig.hamming_enc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(hamming_enc_sptr self, int m)"""
        return _lora_sdr_swig.hamming_enc_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(hamming_enc_sptr self)"""
        return _lora_sdr_swig.hamming_enc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(hamming_enc_sptr self) -> bool"""
        return _lora_sdr_swig.hamming_enc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(hamming_enc_sptr self, int m)"""
        return _lora_sdr_swig.hamming_enc_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(hamming_enc_sptr self) -> int"""
        return _lora_sdr_swig.hamming_enc_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(hamming_enc_sptr self, int i) -> long"""
        return _lora_sdr_swig.hamming_enc_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(hamming_enc_sptr self, long max_output_buffer)
        set_max_output_buffer(hamming_enc_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.hamming_enc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(hamming_enc_sptr self, int i) -> long"""
        return _lora_sdr_swig.hamming_enc_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(hamming_enc_sptr self, long min_output_buffer)
        set_min_output_buffer(hamming_enc_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.hamming_enc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(hamming_enc_sptr self) -> float"""
        return _lora_sdr_swig.hamming_enc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(hamming_enc_sptr self) -> float"""
        return _lora_sdr_swig.hamming_enc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(hamming_enc_sptr self) -> float"""
        return _lora_sdr_swig.hamming_enc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(hamming_enc_sptr self) -> float"""
        return _lora_sdr_swig.hamming_enc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(hamming_enc_sptr self) -> float"""
        return _lora_sdr_swig.hamming_enc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(hamming_enc_sptr self) -> float"""
        return _lora_sdr_swig.hamming_enc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(hamming_enc_sptr self, int which) -> float
        pc_input_buffers_full(hamming_enc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.hamming_enc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(hamming_enc_sptr self, int which) -> float
        pc_input_buffers_full_avg(hamming_enc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.hamming_enc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(hamming_enc_sptr self, int which) -> float
        pc_input_buffers_full_var(hamming_enc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.hamming_enc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(hamming_enc_sptr self, int which) -> float
        pc_output_buffers_full(hamming_enc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.hamming_enc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(hamming_enc_sptr self, int which) -> float
        pc_output_buffers_full_avg(hamming_enc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.hamming_enc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(hamming_enc_sptr self, int which) -> float
        pc_output_buffers_full_var(hamming_enc_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.hamming_enc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(hamming_enc_sptr self) -> float"""
        return _lora_sdr_swig.hamming_enc_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(hamming_enc_sptr self) -> float"""
        return _lora_sdr_swig.hamming_enc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(hamming_enc_sptr self) -> float"""
        return _lora_sdr_swig.hamming_enc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(hamming_enc_sptr self) -> float"""
        return _lora_sdr_swig.hamming_enc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(hamming_enc_sptr self) -> float"""
        return _lora_sdr_swig.hamming_enc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(hamming_enc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.hamming_enc_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(hamming_enc_sptr self)"""
        return _lora_sdr_swig.hamming_enc_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(hamming_enc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.hamming_enc_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(hamming_enc_sptr self) -> int"""
        return _lora_sdr_swig.hamming_enc_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(hamming_enc_sptr self) -> int"""
        return _lora_sdr_swig.hamming_enc_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(hamming_enc_sptr self, int priority) -> int"""
        return _lora_sdr_swig.hamming_enc_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(hamming_enc_sptr self) -> std::string"""
        return _lora_sdr_swig.hamming_enc_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(hamming_enc_sptr self) -> std::string"""
        return _lora_sdr_swig.hamming_enc_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(hamming_enc_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.hamming_enc_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(hamming_enc_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.hamming_enc_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(hamming_enc_sptr self) -> long"""
        return _lora_sdr_swig.hamming_enc_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(hamming_enc_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.hamming_enc_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(hamming_enc_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.hamming_enc_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(hamming_enc_sptr self) -> std::string"""
        return _lora_sdr_swig.hamming_enc_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(hamming_enc_sptr self, std::string name)"""
        return _lora_sdr_swig.hamming_enc_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(hamming_enc_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.hamming_enc_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(hamming_enc_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.hamming_enc_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(hamming_enc_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.hamming_enc_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(hamming_enc_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.hamming_enc_sptr_message_subscribers(self, which_port)

# Register hamming_enc_sptr in _lora_sdr_swig:
_lora_sdr_swig.hamming_enc_sptr_swigregister(hamming_enc_sptr)


hamming_enc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
hamming_enc = hamming_enc.make;

class header_decoder(object):
    r"""
    Decode the header of the data spackage. For more information about the implementation visit header_decoder_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::header_decoder.

    To avoid accidental use of raw pointers, lora_sdr::header_decoder's constructor is in a private implementation class. lora_sdr::header_decoder::make is the public interface for creating new instances.

    Args:
        impl_head : 
        cr : 
        pay_len : 
        has_crc : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(impl_head: "bool", cr: "uint8_t", pay_len: "uint32_t", has_crc: "bool") -> "gr::lora_sdr::header_decoder::sptr":
        r"""
        make(bool impl_head, uint8_t cr, uint32_t pay_len, bool has_crc) -> header_decoder_sptr
        Decode the header of the data spackage. For more information about the implementation visit header_decoder_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::header_decoder.

        To avoid accidental use of raw pointers, lora_sdr::header_decoder's constructor is in a private implementation class. lora_sdr::header_decoder::make is the public interface for creating new instances.

        Args:
            impl_head : 
            cr : 
            pay_len : 
            has_crc : 
        """
        return _lora_sdr_swig.header_decoder_make(impl_head, cr, pay_len, has_crc)
    __swig_destroy__ = _lora_sdr_swig.delete_header_decoder

# Register header_decoder in _lora_sdr_swig:
_lora_sdr_swig.header_decoder_swigregister(header_decoder)

def header_decoder_make(impl_head: "bool", cr: "uint8_t", pay_len: "uint32_t", has_crc: "bool") -> "gr::lora_sdr::header_decoder::sptr":
    r"""
    header_decoder_make(bool impl_head, uint8_t cr, uint32_t pay_len, bool has_crc) -> header_decoder_sptr
    Decode the header of the data spackage. For more information about the implementation visit header_decoder_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::header_decoder.

    To avoid accidental use of raw pointers, lora_sdr::header_decoder's constructor is in a private implementation class. lora_sdr::header_decoder::make is the public interface for creating new instances.

    Args:
        impl_head : 
        cr : 
        pay_len : 
        has_crc : 
    """
    return _lora_sdr_swig.header_decoder_make(impl_head, cr, pay_len, has_crc)

class header_decoder_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::header_decoder > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(header_decoder_sptr self) -> header_decoder_sptr
        __init__(header_decoder_sptr self, header_decoder p) -> header_decoder_sptr
        """
        _lora_sdr_swig.header_decoder_sptr_swiginit(self, _lora_sdr_swig.new_header_decoder_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::header_decoder *":
        r"""__deref__(header_decoder_sptr self) -> header_decoder"""
        return _lora_sdr_swig.header_decoder_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_header_decoder_sptr

    def make(self, impl_head: "bool", cr: "uint8_t", pay_len: "uint32_t", has_crc: "bool") -> "gr::lora_sdr::header_decoder::sptr":
        r"""
        make(header_decoder_sptr self, bool impl_head, uint8_t cr, uint32_t pay_len, bool has_crc) -> header_decoder_sptr
        Decode the header of the data spackage. For more information about the implementation visit header_decoder_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::header_decoder.

        To avoid accidental use of raw pointers, lora_sdr::header_decoder's constructor is in a private implementation class. lora_sdr::header_decoder::make is the public interface for creating new instances.

        Args:
            impl_head : 
            cr : 
            pay_len : 
            has_crc : 
        """
        return _lora_sdr_swig.header_decoder_sptr_make(self, impl_head, cr, pay_len, has_crc)

    def history(self) -> "unsigned int":
        r"""history(header_decoder_sptr self) -> unsigned int"""
        return _lora_sdr_swig.header_decoder_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(header_decoder_sptr self, int which, int delay)
        declare_sample_delay(header_decoder_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.header_decoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(header_decoder_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.header_decoder_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(header_decoder_sptr self, int multiple)"""
        return _lora_sdr_swig.header_decoder_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(header_decoder_sptr self) -> int"""
        return _lora_sdr_swig.header_decoder_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(header_decoder_sptr self) -> double"""
        return _lora_sdr_swig.header_decoder_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(header_decoder_sptr self) -> uint64_t"""
        return _lora_sdr_swig.header_decoder_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(header_decoder_sptr self) -> uint64_t"""
        return _lora_sdr_swig.header_decoder_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(header_decoder_sptr self) -> bool"""
        return _lora_sdr_swig.header_decoder_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(header_decoder_sptr self) -> bool"""
        return _lora_sdr_swig.header_decoder_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(header_decoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.header_decoder_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(header_decoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.header_decoder_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(header_decoder_sptr self, std::string level)"""
        return _lora_sdr_swig.header_decoder_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(header_decoder_sptr self) -> std::string"""
        return _lora_sdr_swig.header_decoder_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(header_decoder_sptr self) -> int"""
        return _lora_sdr_swig.header_decoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(header_decoder_sptr self, int m)"""
        return _lora_sdr_swig.header_decoder_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(header_decoder_sptr self)"""
        return _lora_sdr_swig.header_decoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(header_decoder_sptr self) -> bool"""
        return _lora_sdr_swig.header_decoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(header_decoder_sptr self, int m)"""
        return _lora_sdr_swig.header_decoder_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(header_decoder_sptr self) -> int"""
        return _lora_sdr_swig.header_decoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(header_decoder_sptr self, int i) -> long"""
        return _lora_sdr_swig.header_decoder_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(header_decoder_sptr self, long max_output_buffer)
        set_max_output_buffer(header_decoder_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.header_decoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(header_decoder_sptr self, int i) -> long"""
        return _lora_sdr_swig.header_decoder_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(header_decoder_sptr self, long min_output_buffer)
        set_min_output_buffer(header_decoder_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.header_decoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(header_decoder_sptr self) -> float"""
        return _lora_sdr_swig.header_decoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(header_decoder_sptr self) -> float"""
        return _lora_sdr_swig.header_decoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(header_decoder_sptr self) -> float"""
        return _lora_sdr_swig.header_decoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(header_decoder_sptr self) -> float"""
        return _lora_sdr_swig.header_decoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(header_decoder_sptr self) -> float"""
        return _lora_sdr_swig.header_decoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(header_decoder_sptr self) -> float"""
        return _lora_sdr_swig.header_decoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(header_decoder_sptr self, int which) -> float
        pc_input_buffers_full(header_decoder_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.header_decoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(header_decoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(header_decoder_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.header_decoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(header_decoder_sptr self, int which) -> float
        pc_input_buffers_full_var(header_decoder_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.header_decoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(header_decoder_sptr self, int which) -> float
        pc_output_buffers_full(header_decoder_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.header_decoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(header_decoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(header_decoder_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.header_decoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(header_decoder_sptr self, int which) -> float
        pc_output_buffers_full_var(header_decoder_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.header_decoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(header_decoder_sptr self) -> float"""
        return _lora_sdr_swig.header_decoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(header_decoder_sptr self) -> float"""
        return _lora_sdr_swig.header_decoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(header_decoder_sptr self) -> float"""
        return _lora_sdr_swig.header_decoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(header_decoder_sptr self) -> float"""
        return _lora_sdr_swig.header_decoder_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(header_decoder_sptr self) -> float"""
        return _lora_sdr_swig.header_decoder_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(header_decoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.header_decoder_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(header_decoder_sptr self)"""
        return _lora_sdr_swig.header_decoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(header_decoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.header_decoder_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(header_decoder_sptr self) -> int"""
        return _lora_sdr_swig.header_decoder_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(header_decoder_sptr self) -> int"""
        return _lora_sdr_swig.header_decoder_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(header_decoder_sptr self, int priority) -> int"""
        return _lora_sdr_swig.header_decoder_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(header_decoder_sptr self) -> std::string"""
        return _lora_sdr_swig.header_decoder_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(header_decoder_sptr self) -> std::string"""
        return _lora_sdr_swig.header_decoder_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(header_decoder_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.header_decoder_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(header_decoder_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.header_decoder_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(header_decoder_sptr self) -> long"""
        return _lora_sdr_swig.header_decoder_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(header_decoder_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.header_decoder_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(header_decoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.header_decoder_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(header_decoder_sptr self) -> std::string"""
        return _lora_sdr_swig.header_decoder_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(header_decoder_sptr self, std::string name)"""
        return _lora_sdr_swig.header_decoder_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(header_decoder_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.header_decoder_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(header_decoder_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.header_decoder_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(header_decoder_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.header_decoder_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(header_decoder_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.header_decoder_sptr_message_subscribers(self, which_port)

# Register header_decoder_sptr in _lora_sdr_swig:
_lora_sdr_swig.header_decoder_sptr_swigregister(header_decoder_sptr)


header_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
header_decoder = header_decoder.make;

class header(object):
    r"""
    Encode the header of the data package For more information about the implementation visit header_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::header.

    To avoid accidental use of raw pointers, lora_sdr::header's constructor is in a private implementation class. lora_sdr::header::make is the public interface for creating new instances.

    Args:
        impl_head : 
        has_crc : 
        cr : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(impl_head: "bool", has_crc: "bool", cr: "uint8_t") -> "gr::lora_sdr::header::sptr":
        r"""
        make(bool impl_head, bool has_crc, uint8_t cr) -> header_sptr
        Encode the header of the data package For more information about the implementation visit header_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::header.

        To avoid accidental use of raw pointers, lora_sdr::header's constructor is in a private implementation class. lora_sdr::header::make is the public interface for creating new instances.

        Args:
            impl_head : 
            has_crc : 
            cr : 
        """
        return _lora_sdr_swig.header_make(impl_head, has_crc, cr)
    __swig_destroy__ = _lora_sdr_swig.delete_header

# Register header in _lora_sdr_swig:
_lora_sdr_swig.header_swigregister(header)

def header_make(impl_head: "bool", has_crc: "bool", cr: "uint8_t") -> "gr::lora_sdr::header::sptr":
    r"""
    header_make(bool impl_head, bool has_crc, uint8_t cr) -> header_sptr
    Encode the header of the data package For more information about the implementation visit header_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::header.

    To avoid accidental use of raw pointers, lora_sdr::header's constructor is in a private implementation class. lora_sdr::header::make is the public interface for creating new instances.

    Args:
        impl_head : 
        has_crc : 
        cr : 
    """
    return _lora_sdr_swig.header_make(impl_head, has_crc, cr)

class header_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::header > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(header_sptr self) -> header_sptr
        __init__(header_sptr self, header p) -> header_sptr
        """
        _lora_sdr_swig.header_sptr_swiginit(self, _lora_sdr_swig.new_header_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::header *":
        r"""__deref__(header_sptr self) -> header"""
        return _lora_sdr_swig.header_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_header_sptr

    def make(self, impl_head: "bool", has_crc: "bool", cr: "uint8_t") -> "gr::lora_sdr::header::sptr":
        r"""
        make(header_sptr self, bool impl_head, bool has_crc, uint8_t cr) -> header_sptr
        Encode the header of the data package For more information about the implementation visit header_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::header.

        To avoid accidental use of raw pointers, lora_sdr::header's constructor is in a private implementation class. lora_sdr::header::make is the public interface for creating new instances.

        Args:
            impl_head : 
            has_crc : 
            cr : 
        """
        return _lora_sdr_swig.header_sptr_make(self, impl_head, has_crc, cr)

    def history(self) -> "unsigned int":
        r"""history(header_sptr self) -> unsigned int"""
        return _lora_sdr_swig.header_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(header_sptr self, int which, int delay)
        declare_sample_delay(header_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.header_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(header_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.header_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(header_sptr self, int multiple)"""
        return _lora_sdr_swig.header_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(header_sptr self) -> int"""
        return _lora_sdr_swig.header_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(header_sptr self) -> double"""
        return _lora_sdr_swig.header_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(header_sptr self) -> uint64_t"""
        return _lora_sdr_swig.header_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(header_sptr self) -> uint64_t"""
        return _lora_sdr_swig.header_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(header_sptr self) -> bool"""
        return _lora_sdr_swig.header_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(header_sptr self) -> bool"""
        return _lora_sdr_swig.header_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(header_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.header_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(header_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.header_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(header_sptr self, std::string level)"""
        return _lora_sdr_swig.header_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(header_sptr self) -> std::string"""
        return _lora_sdr_swig.header_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(header_sptr self) -> int"""
        return _lora_sdr_swig.header_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(header_sptr self, int m)"""
        return _lora_sdr_swig.header_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(header_sptr self)"""
        return _lora_sdr_swig.header_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(header_sptr self) -> bool"""
        return _lora_sdr_swig.header_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(header_sptr self, int m)"""
        return _lora_sdr_swig.header_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(header_sptr self) -> int"""
        return _lora_sdr_swig.header_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(header_sptr self, int i) -> long"""
        return _lora_sdr_swig.header_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(header_sptr self, long max_output_buffer)
        set_max_output_buffer(header_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.header_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(header_sptr self, int i) -> long"""
        return _lora_sdr_swig.header_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(header_sptr self, long min_output_buffer)
        set_min_output_buffer(header_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.header_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(header_sptr self) -> float"""
        return _lora_sdr_swig.header_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(header_sptr self) -> float"""
        return _lora_sdr_swig.header_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(header_sptr self) -> float"""
        return _lora_sdr_swig.header_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(header_sptr self) -> float"""
        return _lora_sdr_swig.header_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(header_sptr self) -> float"""
        return _lora_sdr_swig.header_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(header_sptr self) -> float"""
        return _lora_sdr_swig.header_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(header_sptr self, int which) -> float
        pc_input_buffers_full(header_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.header_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(header_sptr self, int which) -> float
        pc_input_buffers_full_avg(header_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.header_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(header_sptr self, int which) -> float
        pc_input_buffers_full_var(header_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.header_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(header_sptr self, int which) -> float
        pc_output_buffers_full(header_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.header_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(header_sptr self, int which) -> float
        pc_output_buffers_full_avg(header_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.header_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(header_sptr self, int which) -> float
        pc_output_buffers_full_var(header_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.header_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(header_sptr self) -> float"""
        return _lora_sdr_swig.header_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(header_sptr self) -> float"""
        return _lora_sdr_swig.header_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(header_sptr self) -> float"""
        return _lora_sdr_swig.header_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(header_sptr self) -> float"""
        return _lora_sdr_swig.header_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(header_sptr self) -> float"""
        return _lora_sdr_swig.header_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(header_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.header_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(header_sptr self)"""
        return _lora_sdr_swig.header_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(header_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.header_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(header_sptr self) -> int"""
        return _lora_sdr_swig.header_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(header_sptr self) -> int"""
        return _lora_sdr_swig.header_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(header_sptr self, int priority) -> int"""
        return _lora_sdr_swig.header_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(header_sptr self) -> std::string"""
        return _lora_sdr_swig.header_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(header_sptr self) -> std::string"""
        return _lora_sdr_swig.header_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(header_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.header_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(header_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.header_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(header_sptr self) -> long"""
        return _lora_sdr_swig.header_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(header_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.header_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(header_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.header_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(header_sptr self) -> std::string"""
        return _lora_sdr_swig.header_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(header_sptr self, std::string name)"""
        return _lora_sdr_swig.header_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(header_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.header_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(header_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.header_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(header_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.header_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(header_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.header_sptr_message_subscribers(self, which_port)

# Register header_sptr in _lora_sdr_swig:
_lora_sdr_swig.header_sptr_swigregister(header_sptr)


header_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
header = header.make;

class interleaver(object):
    r"""
    Interleaves the to be sent data, in order to gain more resilience against bit transmission errors For more information about the implementation visit interleaver_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::interleaver.

    To avoid accidental use of raw pointers, lora_sdr::interleaver's constructor is in a private implementation class. lora_sdr::interleaver::make is the public interface for creating new instances.

    Args:
        cr : 
        sf : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(cr: "uint8_t", sf: "uint8_t") -> "gr::lora_sdr::interleaver::sptr":
        r"""
        make(uint8_t cr, uint8_t sf) -> interleaver_sptr
        Interleaves the to be sent data, in order to gain more resilience against bit transmission errors For more information about the implementation visit interleaver_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::interleaver.

        To avoid accidental use of raw pointers, lora_sdr::interleaver's constructor is in a private implementation class. lora_sdr::interleaver::make is the public interface for creating new instances.

        Args:
            cr : 
            sf : 
        """
        return _lora_sdr_swig.interleaver_make(cr, sf)
    __swig_destroy__ = _lora_sdr_swig.delete_interleaver

# Register interleaver in _lora_sdr_swig:
_lora_sdr_swig.interleaver_swigregister(interleaver)

def interleaver_make(cr: "uint8_t", sf: "uint8_t") -> "gr::lora_sdr::interleaver::sptr":
    r"""
    interleaver_make(uint8_t cr, uint8_t sf) -> interleaver_sptr
    Interleaves the to be sent data, in order to gain more resilience against bit transmission errors For more information about the implementation visit interleaver_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::interleaver.

    To avoid accidental use of raw pointers, lora_sdr::interleaver's constructor is in a private implementation class. lora_sdr::interleaver::make is the public interface for creating new instances.

    Args:
        cr : 
        sf : 
    """
    return _lora_sdr_swig.interleaver_make(cr, sf)

class interleaver_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::interleaver > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(interleaver_sptr self) -> interleaver_sptr
        __init__(interleaver_sptr self, interleaver p) -> interleaver_sptr
        """
        _lora_sdr_swig.interleaver_sptr_swiginit(self, _lora_sdr_swig.new_interleaver_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::interleaver *":
        r"""__deref__(interleaver_sptr self) -> interleaver"""
        return _lora_sdr_swig.interleaver_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_interleaver_sptr

    def make(self, cr: "uint8_t", sf: "uint8_t") -> "gr::lora_sdr::interleaver::sptr":
        r"""
        make(interleaver_sptr self, uint8_t cr, uint8_t sf) -> interleaver_sptr
        Interleaves the to be sent data, in order to gain more resilience against bit transmission errors For more information about the implementation visit interleaver_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::interleaver.

        To avoid accidental use of raw pointers, lora_sdr::interleaver's constructor is in a private implementation class. lora_sdr::interleaver::make is the public interface for creating new instances.

        Args:
            cr : 
            sf : 
        """
        return _lora_sdr_swig.interleaver_sptr_make(self, cr, sf)

    def history(self) -> "unsigned int":
        r"""history(interleaver_sptr self) -> unsigned int"""
        return _lora_sdr_swig.interleaver_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(interleaver_sptr self, int which, int delay)
        declare_sample_delay(interleaver_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.interleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(interleaver_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.interleaver_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(interleaver_sptr self, int multiple)"""
        return _lora_sdr_swig.interleaver_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(interleaver_sptr self) -> int"""
        return _lora_sdr_swig.interleaver_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(interleaver_sptr self) -> double"""
        return _lora_sdr_swig.interleaver_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(interleaver_sptr self) -> uint64_t"""
        return _lora_sdr_swig.interleaver_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(interleaver_sptr self) -> uint64_t"""
        return _lora_sdr_swig.interleaver_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(interleaver_sptr self) -> bool"""
        return _lora_sdr_swig.interleaver_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(interleaver_sptr self) -> bool"""
        return _lora_sdr_swig.interleaver_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(interleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.interleaver_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(interleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.interleaver_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(interleaver_sptr self, std::string level)"""
        return _lora_sdr_swig.interleaver_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(interleaver_sptr self) -> std::string"""
        return _lora_sdr_swig.interleaver_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(interleaver_sptr self) -> int"""
        return _lora_sdr_swig.interleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(interleaver_sptr self, int m)"""
        return _lora_sdr_swig.interleaver_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(interleaver_sptr self)"""
        return _lora_sdr_swig.interleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(interleaver_sptr self) -> bool"""
        return _lora_sdr_swig.interleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(interleaver_sptr self, int m)"""
        return _lora_sdr_swig.interleaver_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(interleaver_sptr self) -> int"""
        return _lora_sdr_swig.interleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(interleaver_sptr self, int i) -> long"""
        return _lora_sdr_swig.interleaver_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(interleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(interleaver_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.interleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(interleaver_sptr self, int i) -> long"""
        return _lora_sdr_swig.interleaver_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(interleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(interleaver_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.interleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(interleaver_sptr self) -> float"""
        return _lora_sdr_swig.interleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(interleaver_sptr self) -> float"""
        return _lora_sdr_swig.interleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(interleaver_sptr self) -> float"""
        return _lora_sdr_swig.interleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(interleaver_sptr self) -> float"""
        return _lora_sdr_swig.interleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(interleaver_sptr self) -> float"""
        return _lora_sdr_swig.interleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(interleaver_sptr self) -> float"""
        return _lora_sdr_swig.interleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(interleaver_sptr self, int which) -> float
        pc_input_buffers_full(interleaver_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.interleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(interleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(interleaver_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.interleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(interleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(interleaver_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.interleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(interleaver_sptr self, int which) -> float
        pc_output_buffers_full(interleaver_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.interleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(interleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(interleaver_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.interleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(interleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(interleaver_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.interleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(interleaver_sptr self) -> float"""
        return _lora_sdr_swig.interleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(interleaver_sptr self) -> float"""
        return _lora_sdr_swig.interleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(interleaver_sptr self) -> float"""
        return _lora_sdr_swig.interleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(interleaver_sptr self) -> float"""
        return _lora_sdr_swig.interleaver_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(interleaver_sptr self) -> float"""
        return _lora_sdr_swig.interleaver_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(interleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.interleaver_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(interleaver_sptr self)"""
        return _lora_sdr_swig.interleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(interleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.interleaver_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(interleaver_sptr self) -> int"""
        return _lora_sdr_swig.interleaver_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(interleaver_sptr self) -> int"""
        return _lora_sdr_swig.interleaver_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(interleaver_sptr self, int priority) -> int"""
        return _lora_sdr_swig.interleaver_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(interleaver_sptr self) -> std::string"""
        return _lora_sdr_swig.interleaver_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(interleaver_sptr self) -> std::string"""
        return _lora_sdr_swig.interleaver_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(interleaver_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.interleaver_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(interleaver_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.interleaver_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(interleaver_sptr self) -> long"""
        return _lora_sdr_swig.interleaver_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(interleaver_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.interleaver_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(interleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.interleaver_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(interleaver_sptr self) -> std::string"""
        return _lora_sdr_swig.interleaver_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(interleaver_sptr self, std::string name)"""
        return _lora_sdr_swig.interleaver_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(interleaver_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.interleaver_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(interleaver_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.interleaver_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(interleaver_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.interleaver_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(interleaver_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.interleaver_sptr_message_subscribers(self, which_port)

# Register interleaver_sptr in _lora_sdr_swig:
_lora_sdr_swig.interleaver_sptr_swigregister(interleaver_sptr)


interleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
interleaver = interleaver.make;

class modulate(object):
    r"""
    End block of the sending side that modulates the final to be sent data to the LoRa standard For more information about the implementation visit modulate_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::modulate.

    To avoid accidental use of raw pointers, lora_sdr::modulate's constructor is in a private implementation class. lora_sdr::modulate::make is the public interface for creating new instances.

    Args:
        sf : 
        samp_rate : 
        bw : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(sf: "uint8_t", samp_rate: "uint32_t", bw: "uint32_t") -> "gr::lora_sdr::modulate::sptr":
        r"""
        make(uint8_t sf, uint32_t samp_rate, uint32_t bw) -> modulate_sptr
        End block of the sending side that modulates the final to be sent data to the LoRa standard For more information about the implementation visit modulate_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::modulate.

        To avoid accidental use of raw pointers, lora_sdr::modulate's constructor is in a private implementation class. lora_sdr::modulate::make is the public interface for creating new instances.

        Args:
            sf : 
            samp_rate : 
            bw : 
        """
        return _lora_sdr_swig.modulate_make(sf, samp_rate, bw)
    __swig_destroy__ = _lora_sdr_swig.delete_modulate

# Register modulate in _lora_sdr_swig:
_lora_sdr_swig.modulate_swigregister(modulate)

def modulate_make(sf: "uint8_t", samp_rate: "uint32_t", bw: "uint32_t") -> "gr::lora_sdr::modulate::sptr":
    r"""
    modulate_make(uint8_t sf, uint32_t samp_rate, uint32_t bw) -> modulate_sptr
    End block of the sending side that modulates the final to be sent data to the LoRa standard For more information about the implementation visit modulate_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::modulate.

    To avoid accidental use of raw pointers, lora_sdr::modulate's constructor is in a private implementation class. lora_sdr::modulate::make is the public interface for creating new instances.

    Args:
        sf : 
        samp_rate : 
        bw : 
    """
    return _lora_sdr_swig.modulate_make(sf, samp_rate, bw)

class modulate_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::modulate > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(modulate_sptr self) -> modulate_sptr
        __init__(modulate_sptr self, modulate p) -> modulate_sptr
        """
        _lora_sdr_swig.modulate_sptr_swiginit(self, _lora_sdr_swig.new_modulate_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::modulate *":
        r"""__deref__(modulate_sptr self) -> modulate"""
        return _lora_sdr_swig.modulate_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_modulate_sptr

    def make(self, sf: "uint8_t", samp_rate: "uint32_t", bw: "uint32_t") -> "gr::lora_sdr::modulate::sptr":
        r"""
        make(modulate_sptr self, uint8_t sf, uint32_t samp_rate, uint32_t bw) -> modulate_sptr
        End block of the sending side that modulates the final to be sent data to the LoRa standard For more information about the implementation visit modulate_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::modulate.

        To avoid accidental use of raw pointers, lora_sdr::modulate's constructor is in a private implementation class. lora_sdr::modulate::make is the public interface for creating new instances.

        Args:
            sf : 
            samp_rate : 
            bw : 
        """
        return _lora_sdr_swig.modulate_sptr_make(self, sf, samp_rate, bw)

    def history(self) -> "unsigned int":
        r"""history(modulate_sptr self) -> unsigned int"""
        return _lora_sdr_swig.modulate_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(modulate_sptr self, int which, int delay)
        declare_sample_delay(modulate_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.modulate_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(modulate_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.modulate_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(modulate_sptr self, int multiple)"""
        return _lora_sdr_swig.modulate_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(modulate_sptr self) -> int"""
        return _lora_sdr_swig.modulate_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(modulate_sptr self) -> double"""
        return _lora_sdr_swig.modulate_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(modulate_sptr self) -> uint64_t"""
        return _lora_sdr_swig.modulate_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(modulate_sptr self) -> uint64_t"""
        return _lora_sdr_swig.modulate_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(modulate_sptr self) -> bool"""
        return _lora_sdr_swig.modulate_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(modulate_sptr self) -> bool"""
        return _lora_sdr_swig.modulate_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(modulate_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.modulate_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(modulate_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.modulate_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(modulate_sptr self, std::string level)"""
        return _lora_sdr_swig.modulate_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(modulate_sptr self) -> std::string"""
        return _lora_sdr_swig.modulate_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(modulate_sptr self) -> int"""
        return _lora_sdr_swig.modulate_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(modulate_sptr self, int m)"""
        return _lora_sdr_swig.modulate_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(modulate_sptr self)"""
        return _lora_sdr_swig.modulate_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(modulate_sptr self) -> bool"""
        return _lora_sdr_swig.modulate_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(modulate_sptr self, int m)"""
        return _lora_sdr_swig.modulate_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(modulate_sptr self) -> int"""
        return _lora_sdr_swig.modulate_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(modulate_sptr self, int i) -> long"""
        return _lora_sdr_swig.modulate_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(modulate_sptr self, long max_output_buffer)
        set_max_output_buffer(modulate_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.modulate_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(modulate_sptr self, int i) -> long"""
        return _lora_sdr_swig.modulate_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(modulate_sptr self, long min_output_buffer)
        set_min_output_buffer(modulate_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.modulate_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(modulate_sptr self) -> float"""
        return _lora_sdr_swig.modulate_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(modulate_sptr self) -> float"""
        return _lora_sdr_swig.modulate_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(modulate_sptr self) -> float"""
        return _lora_sdr_swig.modulate_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(modulate_sptr self) -> float"""
        return _lora_sdr_swig.modulate_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(modulate_sptr self) -> float"""
        return _lora_sdr_swig.modulate_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(modulate_sptr self) -> float"""
        return _lora_sdr_swig.modulate_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(modulate_sptr self, int which) -> float
        pc_input_buffers_full(modulate_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.modulate_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(modulate_sptr self, int which) -> float
        pc_input_buffers_full_avg(modulate_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.modulate_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(modulate_sptr self, int which) -> float
        pc_input_buffers_full_var(modulate_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.modulate_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(modulate_sptr self, int which) -> float
        pc_output_buffers_full(modulate_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.modulate_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(modulate_sptr self, int which) -> float
        pc_output_buffers_full_avg(modulate_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.modulate_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(modulate_sptr self, int which) -> float
        pc_output_buffers_full_var(modulate_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.modulate_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(modulate_sptr self) -> float"""
        return _lora_sdr_swig.modulate_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(modulate_sptr self) -> float"""
        return _lora_sdr_swig.modulate_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(modulate_sptr self) -> float"""
        return _lora_sdr_swig.modulate_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(modulate_sptr self) -> float"""
        return _lora_sdr_swig.modulate_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(modulate_sptr self) -> float"""
        return _lora_sdr_swig.modulate_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(modulate_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.modulate_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(modulate_sptr self)"""
        return _lora_sdr_swig.modulate_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(modulate_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.modulate_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(modulate_sptr self) -> int"""
        return _lora_sdr_swig.modulate_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(modulate_sptr self) -> int"""
        return _lora_sdr_swig.modulate_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(modulate_sptr self, int priority) -> int"""
        return _lora_sdr_swig.modulate_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(modulate_sptr self) -> std::string"""
        return _lora_sdr_swig.modulate_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(modulate_sptr self) -> std::string"""
        return _lora_sdr_swig.modulate_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(modulate_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.modulate_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(modulate_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.modulate_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(modulate_sptr self) -> long"""
        return _lora_sdr_swig.modulate_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(modulate_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.modulate_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(modulate_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.modulate_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(modulate_sptr self) -> std::string"""
        return _lora_sdr_swig.modulate_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(modulate_sptr self, std::string name)"""
        return _lora_sdr_swig.modulate_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(modulate_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.modulate_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(modulate_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.modulate_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(modulate_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.modulate_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(modulate_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.modulate_sptr_message_subscribers(self, which_port)

# Register modulate_sptr in _lora_sdr_swig:
_lora_sdr_swig.modulate_sptr_swigregister(modulate_sptr)


modulate_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
modulate = modulate.make;

class RH_RF95_header(object):
    r"""
    Encode the data in the RH_RF95 header format For more information about the implementation visit RH_RF95_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::RH_RF95_header.

    To avoid accidental use of raw pointers, lora_sdr::RH_RF95_header's constructor is in a private implementation class. lora_sdr::RH_RF95_header::make is the public interface for creating new instances.

    Args:
        _to : 
        _from : 
        _id : 
        _flags : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(_to: "uint8_t", _from: "uint8_t", _id: "uint8_t", _flags: "uint8_t") -> "gr::lora_sdr::RH_RF95_header::sptr":
        r"""
        make(uint8_t _to, uint8_t _from, uint8_t _id, uint8_t _flags) -> RH_RF95_header_sptr
        Encode the data in the RH_RF95 header format For more information about the implementation visit RH_RF95_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::RH_RF95_header.

        To avoid accidental use of raw pointers, lora_sdr::RH_RF95_header's constructor is in a private implementation class. lora_sdr::RH_RF95_header::make is the public interface for creating new instances.

        Args:
            _to : 
            _from : 
            _id : 
            _flags : 
        """
        return _lora_sdr_swig.RH_RF95_header_make(_to, _from, _id, _flags)
    __swig_destroy__ = _lora_sdr_swig.delete_RH_RF95_header

# Register RH_RF95_header in _lora_sdr_swig:
_lora_sdr_swig.RH_RF95_header_swigregister(RH_RF95_header)

def RH_RF95_header_make(_to: "uint8_t", _from: "uint8_t", _id: "uint8_t", _flags: "uint8_t") -> "gr::lora_sdr::RH_RF95_header::sptr":
    r"""
    RH_RF95_header_make(uint8_t _to, uint8_t _from, uint8_t _id, uint8_t _flags) -> RH_RF95_header_sptr
    Encode the data in the RH_RF95 header format For more information about the implementation visit RH_RF95_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::RH_RF95_header.

    To avoid accidental use of raw pointers, lora_sdr::RH_RF95_header's constructor is in a private implementation class. lora_sdr::RH_RF95_header::make is the public interface for creating new instances.

    Args:
        _to : 
        _from : 
        _id : 
        _flags : 
    """
    return _lora_sdr_swig.RH_RF95_header_make(_to, _from, _id, _flags)

class RH_RF95_header_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::RH_RF95_header > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RH_RF95_header_sptr self) -> RH_RF95_header_sptr
        __init__(RH_RF95_header_sptr self, RH_RF95_header p) -> RH_RF95_header_sptr
        """
        _lora_sdr_swig.RH_RF95_header_sptr_swiginit(self, _lora_sdr_swig.new_RH_RF95_header_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::RH_RF95_header *":
        r"""__deref__(RH_RF95_header_sptr self) -> RH_RF95_header"""
        return _lora_sdr_swig.RH_RF95_header_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_RH_RF95_header_sptr

    def make(self, _to: "uint8_t", _from: "uint8_t", _id: "uint8_t", _flags: "uint8_t") -> "gr::lora_sdr::RH_RF95_header::sptr":
        r"""
        make(RH_RF95_header_sptr self, uint8_t _to, uint8_t _from, uint8_t _id, uint8_t _flags) -> RH_RF95_header_sptr
        Encode the data in the RH_RF95 header format For more information about the implementation visit RH_RF95_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::RH_RF95_header.

        To avoid accidental use of raw pointers, lora_sdr::RH_RF95_header's constructor is in a private implementation class. lora_sdr::RH_RF95_header::make is the public interface for creating new instances.

        Args:
            _to : 
            _from : 
            _id : 
            _flags : 
        """
        return _lora_sdr_swig.RH_RF95_header_sptr_make(self, _to, _from, _id, _flags)

    def history(self) -> "unsigned int":
        r"""history(RH_RF95_header_sptr self) -> unsigned int"""
        return _lora_sdr_swig.RH_RF95_header_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(RH_RF95_header_sptr self, int which, int delay)
        declare_sample_delay(RH_RF95_header_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.RH_RF95_header_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(RH_RF95_header_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.RH_RF95_header_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(RH_RF95_header_sptr self, int multiple)"""
        return _lora_sdr_swig.RH_RF95_header_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(RH_RF95_header_sptr self) -> int"""
        return _lora_sdr_swig.RH_RF95_header_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(RH_RF95_header_sptr self) -> double"""
        return _lora_sdr_swig.RH_RF95_header_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(RH_RF95_header_sptr self) -> uint64_t"""
        return _lora_sdr_swig.RH_RF95_header_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(RH_RF95_header_sptr self) -> uint64_t"""
        return _lora_sdr_swig.RH_RF95_header_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(RH_RF95_header_sptr self) -> bool"""
        return _lora_sdr_swig.RH_RF95_header_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(RH_RF95_header_sptr self) -> bool"""
        return _lora_sdr_swig.RH_RF95_header_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(RH_RF95_header_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.RH_RF95_header_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(RH_RF95_header_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.RH_RF95_header_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(RH_RF95_header_sptr self, std::string level)"""
        return _lora_sdr_swig.RH_RF95_header_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(RH_RF95_header_sptr self) -> std::string"""
        return _lora_sdr_swig.RH_RF95_header_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(RH_RF95_header_sptr self) -> int"""
        return _lora_sdr_swig.RH_RF95_header_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(RH_RF95_header_sptr self, int m)"""
        return _lora_sdr_swig.RH_RF95_header_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(RH_RF95_header_sptr self)"""
        return _lora_sdr_swig.RH_RF95_header_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(RH_RF95_header_sptr self) -> bool"""
        return _lora_sdr_swig.RH_RF95_header_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(RH_RF95_header_sptr self, int m)"""
        return _lora_sdr_swig.RH_RF95_header_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(RH_RF95_header_sptr self) -> int"""
        return _lora_sdr_swig.RH_RF95_header_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(RH_RF95_header_sptr self, int i) -> long"""
        return _lora_sdr_swig.RH_RF95_header_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(RH_RF95_header_sptr self, long max_output_buffer)
        set_max_output_buffer(RH_RF95_header_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.RH_RF95_header_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(RH_RF95_header_sptr self, int i) -> long"""
        return _lora_sdr_swig.RH_RF95_header_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(RH_RF95_header_sptr self, long min_output_buffer)
        set_min_output_buffer(RH_RF95_header_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.RH_RF95_header_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(RH_RF95_header_sptr self) -> float"""
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(RH_RF95_header_sptr self) -> float"""
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(RH_RF95_header_sptr self) -> float"""
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(RH_RF95_header_sptr self) -> float"""
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(RH_RF95_header_sptr self) -> float"""
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(RH_RF95_header_sptr self) -> float"""
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(RH_RF95_header_sptr self, int which) -> float
        pc_input_buffers_full(RH_RF95_header_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(RH_RF95_header_sptr self, int which) -> float
        pc_input_buffers_full_avg(RH_RF95_header_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(RH_RF95_header_sptr self, int which) -> float
        pc_input_buffers_full_var(RH_RF95_header_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(RH_RF95_header_sptr self, int which) -> float
        pc_output_buffers_full(RH_RF95_header_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(RH_RF95_header_sptr self, int which) -> float
        pc_output_buffers_full_avg(RH_RF95_header_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(RH_RF95_header_sptr self, int which) -> float
        pc_output_buffers_full_var(RH_RF95_header_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(RH_RF95_header_sptr self) -> float"""
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(RH_RF95_header_sptr self) -> float"""
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(RH_RF95_header_sptr self) -> float"""
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(RH_RF95_header_sptr self) -> float"""
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(RH_RF95_header_sptr self) -> float"""
        return _lora_sdr_swig.RH_RF95_header_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(RH_RF95_header_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.RH_RF95_header_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(RH_RF95_header_sptr self)"""
        return _lora_sdr_swig.RH_RF95_header_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(RH_RF95_header_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.RH_RF95_header_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(RH_RF95_header_sptr self) -> int"""
        return _lora_sdr_swig.RH_RF95_header_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(RH_RF95_header_sptr self) -> int"""
        return _lora_sdr_swig.RH_RF95_header_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(RH_RF95_header_sptr self, int priority) -> int"""
        return _lora_sdr_swig.RH_RF95_header_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(RH_RF95_header_sptr self) -> std::string"""
        return _lora_sdr_swig.RH_RF95_header_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(RH_RF95_header_sptr self) -> std::string"""
        return _lora_sdr_swig.RH_RF95_header_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(RH_RF95_header_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.RH_RF95_header_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(RH_RF95_header_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.RH_RF95_header_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(RH_RF95_header_sptr self) -> long"""
        return _lora_sdr_swig.RH_RF95_header_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(RH_RF95_header_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.RH_RF95_header_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(RH_RF95_header_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.RH_RF95_header_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(RH_RF95_header_sptr self) -> std::string"""
        return _lora_sdr_swig.RH_RF95_header_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(RH_RF95_header_sptr self, std::string name)"""
        return _lora_sdr_swig.RH_RF95_header_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(RH_RF95_header_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.RH_RF95_header_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(RH_RF95_header_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.RH_RF95_header_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(RH_RF95_header_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.RH_RF95_header_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(RH_RF95_header_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.RH_RF95_header_sptr_message_subscribers(self, which_port)

# Register RH_RF95_header_sptr in _lora_sdr_swig:
_lora_sdr_swig.RH_RF95_header_sptr_swigregister(RH_RF95_header_sptr)


RH_RF95_header_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
RH_RF95_header = RH_RF95_header.make;

class fft_demod(object):
    r"""
    FFT demodulation block ,for more information about the implementation visit fft_demod_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::fft_demod.

    To avoid accidental use of raw pointers, lora_sdr::fft_demod's constructor is in a private implementation class. lora_sdr::fft_demod::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        bandwidth : 
        sf : 
        impl_head : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(samp_rate: "float", bandwidth: "uint32_t", sf: "uint8_t", impl_head: "bool") -> "gr::lora_sdr::fft_demod::sptr":
        r"""
        make(float samp_rate, uint32_t bandwidth, uint8_t sf, bool impl_head) -> fft_demod_sptr
        FFT demodulation block ,for more information about the implementation visit fft_demod_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::fft_demod.

        To avoid accidental use of raw pointers, lora_sdr::fft_demod's constructor is in a private implementation class. lora_sdr::fft_demod::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            bandwidth : 
            sf : 
            impl_head : 
        """
        return _lora_sdr_swig.fft_demod_make(samp_rate, bandwidth, sf, impl_head)
    __swig_destroy__ = _lora_sdr_swig.delete_fft_demod

# Register fft_demod in _lora_sdr_swig:
_lora_sdr_swig.fft_demod_swigregister(fft_demod)

def fft_demod_make(samp_rate: "float", bandwidth: "uint32_t", sf: "uint8_t", impl_head: "bool") -> "gr::lora_sdr::fft_demod::sptr":
    r"""
    fft_demod_make(float samp_rate, uint32_t bandwidth, uint8_t sf, bool impl_head) -> fft_demod_sptr
    FFT demodulation block ,for more information about the implementation visit fft_demod_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::fft_demod.

    To avoid accidental use of raw pointers, lora_sdr::fft_demod's constructor is in a private implementation class. lora_sdr::fft_demod::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        bandwidth : 
        sf : 
        impl_head : 
    """
    return _lora_sdr_swig.fft_demod_make(samp_rate, bandwidth, sf, impl_head)

class fft_demod_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::fft_demod > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(fft_demod_sptr self) -> fft_demod_sptr
        __init__(fft_demod_sptr self, fft_demod p) -> fft_demod_sptr
        """
        _lora_sdr_swig.fft_demod_sptr_swiginit(self, _lora_sdr_swig.new_fft_demod_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::fft_demod *":
        r"""__deref__(fft_demod_sptr self) -> fft_demod"""
        return _lora_sdr_swig.fft_demod_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_fft_demod_sptr

    def make(self, samp_rate: "float", bandwidth: "uint32_t", sf: "uint8_t", impl_head: "bool") -> "gr::lora_sdr::fft_demod::sptr":
        r"""
        make(fft_demod_sptr self, float samp_rate, uint32_t bandwidth, uint8_t sf, bool impl_head) -> fft_demod_sptr
        FFT demodulation block ,for more information about the implementation visit fft_demod_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::fft_demod.

        To avoid accidental use of raw pointers, lora_sdr::fft_demod's constructor is in a private implementation class. lora_sdr::fft_demod::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            bandwidth : 
            sf : 
            impl_head : 
        """
        return _lora_sdr_swig.fft_demod_sptr_make(self, samp_rate, bandwidth, sf, impl_head)

    def history(self) -> "unsigned int":
        r"""history(fft_demod_sptr self) -> unsigned int"""
        return _lora_sdr_swig.fft_demod_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(fft_demod_sptr self, int which, int delay)
        declare_sample_delay(fft_demod_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.fft_demod_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(fft_demod_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.fft_demod_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(fft_demod_sptr self, int multiple)"""
        return _lora_sdr_swig.fft_demod_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(fft_demod_sptr self) -> int"""
        return _lora_sdr_swig.fft_demod_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(fft_demod_sptr self) -> double"""
        return _lora_sdr_swig.fft_demod_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(fft_demod_sptr self) -> uint64_t"""
        return _lora_sdr_swig.fft_demod_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(fft_demod_sptr self) -> uint64_t"""
        return _lora_sdr_swig.fft_demod_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(fft_demod_sptr self) -> bool"""
        return _lora_sdr_swig.fft_demod_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(fft_demod_sptr self) -> bool"""
        return _lora_sdr_swig.fft_demod_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(fft_demod_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.fft_demod_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(fft_demod_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.fft_demod_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(fft_demod_sptr self, std::string level)"""
        return _lora_sdr_swig.fft_demod_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(fft_demod_sptr self) -> std::string"""
        return _lora_sdr_swig.fft_demod_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(fft_demod_sptr self) -> int"""
        return _lora_sdr_swig.fft_demod_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(fft_demod_sptr self, int m)"""
        return _lora_sdr_swig.fft_demod_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(fft_demod_sptr self)"""
        return _lora_sdr_swig.fft_demod_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(fft_demod_sptr self) -> bool"""
        return _lora_sdr_swig.fft_demod_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(fft_demod_sptr self, int m)"""
        return _lora_sdr_swig.fft_demod_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(fft_demod_sptr self) -> int"""
        return _lora_sdr_swig.fft_demod_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(fft_demod_sptr self, int i) -> long"""
        return _lora_sdr_swig.fft_demod_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(fft_demod_sptr self, long max_output_buffer)
        set_max_output_buffer(fft_demod_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.fft_demod_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(fft_demod_sptr self, int i) -> long"""
        return _lora_sdr_swig.fft_demod_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(fft_demod_sptr self, long min_output_buffer)
        set_min_output_buffer(fft_demod_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.fft_demod_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(fft_demod_sptr self) -> float"""
        return _lora_sdr_swig.fft_demod_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(fft_demod_sptr self) -> float"""
        return _lora_sdr_swig.fft_demod_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(fft_demod_sptr self) -> float"""
        return _lora_sdr_swig.fft_demod_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(fft_demod_sptr self) -> float"""
        return _lora_sdr_swig.fft_demod_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(fft_demod_sptr self) -> float"""
        return _lora_sdr_swig.fft_demod_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(fft_demod_sptr self) -> float"""
        return _lora_sdr_swig.fft_demod_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(fft_demod_sptr self, int which) -> float
        pc_input_buffers_full(fft_demod_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.fft_demod_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(fft_demod_sptr self, int which) -> float
        pc_input_buffers_full_avg(fft_demod_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.fft_demod_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(fft_demod_sptr self, int which) -> float
        pc_input_buffers_full_var(fft_demod_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.fft_demod_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(fft_demod_sptr self, int which) -> float
        pc_output_buffers_full(fft_demod_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.fft_demod_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(fft_demod_sptr self, int which) -> float
        pc_output_buffers_full_avg(fft_demod_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.fft_demod_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(fft_demod_sptr self, int which) -> float
        pc_output_buffers_full_var(fft_demod_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.fft_demod_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(fft_demod_sptr self) -> float"""
        return _lora_sdr_swig.fft_demod_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(fft_demod_sptr self) -> float"""
        return _lora_sdr_swig.fft_demod_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(fft_demod_sptr self) -> float"""
        return _lora_sdr_swig.fft_demod_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(fft_demod_sptr self) -> float"""
        return _lora_sdr_swig.fft_demod_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(fft_demod_sptr self) -> float"""
        return _lora_sdr_swig.fft_demod_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(fft_demod_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.fft_demod_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(fft_demod_sptr self)"""
        return _lora_sdr_swig.fft_demod_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(fft_demod_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.fft_demod_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(fft_demod_sptr self) -> int"""
        return _lora_sdr_swig.fft_demod_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(fft_demod_sptr self) -> int"""
        return _lora_sdr_swig.fft_demod_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(fft_demod_sptr self, int priority) -> int"""
        return _lora_sdr_swig.fft_demod_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(fft_demod_sptr self) -> std::string"""
        return _lora_sdr_swig.fft_demod_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(fft_demod_sptr self) -> std::string"""
        return _lora_sdr_swig.fft_demod_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(fft_demod_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.fft_demod_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(fft_demod_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.fft_demod_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(fft_demod_sptr self) -> long"""
        return _lora_sdr_swig.fft_demod_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(fft_demod_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.fft_demod_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(fft_demod_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.fft_demod_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(fft_demod_sptr self) -> std::string"""
        return _lora_sdr_swig.fft_demod_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(fft_demod_sptr self, std::string name)"""
        return _lora_sdr_swig.fft_demod_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(fft_demod_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.fft_demod_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(fft_demod_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.fft_demod_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(fft_demod_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.fft_demod_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(fft_demod_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.fft_demod_sptr_message_subscribers(self, which_port)

# Register fft_demod_sptr in _lora_sdr_swig:
_lora_sdr_swig.fft_demod_sptr_swigregister(fft_demod_sptr)


fft_demod_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
fft_demod = fft_demod.make;

class data_source(object):
    r"""
    Data source that can both generate random strings or static strings, for more information about the implementation visit data_source_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::data_source.

    To avoid accidental use of raw pointers, lora_sdr::data_source's constructor is in a private implementation class. lora_sdr::data_source::make is the public interface for creating new instances.

    Args:
        pay_len : 
        n_frames : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(pay_len: "int", n_frames: "int") -> "gr::lora_sdr::data_source::sptr":
        r"""
        make(int pay_len, int n_frames) -> data_source_sptr
        Data source that can both generate random strings or static strings, for more information about the implementation visit data_source_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::data_source.

        To avoid accidental use of raw pointers, lora_sdr::data_source's constructor is in a private implementation class. lora_sdr::data_source::make is the public interface for creating new instances.

        Args:
            pay_len : 
            n_frames : 
        """
        return _lora_sdr_swig.data_source_make(pay_len, n_frames)
    __swig_destroy__ = _lora_sdr_swig.delete_data_source

# Register data_source in _lora_sdr_swig:
_lora_sdr_swig.data_source_swigregister(data_source)

def data_source_make(pay_len: "int", n_frames: "int") -> "gr::lora_sdr::data_source::sptr":
    r"""
    data_source_make(int pay_len, int n_frames) -> data_source_sptr
    Data source that can both generate random strings or static strings, for more information about the implementation visit data_source_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::data_source.

    To avoid accidental use of raw pointers, lora_sdr::data_source's constructor is in a private implementation class. lora_sdr::data_source::make is the public interface for creating new instances.

    Args:
        pay_len : 
        n_frames : 
    """
    return _lora_sdr_swig.data_source_make(pay_len, n_frames)

class data_source_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::data_source > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(data_source_sptr self) -> data_source_sptr
        __init__(data_source_sptr self, data_source p) -> data_source_sptr
        """
        _lora_sdr_swig.data_source_sptr_swiginit(self, _lora_sdr_swig.new_data_source_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::data_source *":
        r"""__deref__(data_source_sptr self) -> data_source"""
        return _lora_sdr_swig.data_source_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_data_source_sptr

    def make(self, pay_len: "int", n_frames: "int") -> "gr::lora_sdr::data_source::sptr":
        r"""
        make(data_source_sptr self, int pay_len, int n_frames) -> data_source_sptr
        Data source that can both generate random strings or static strings, for more information about the implementation visit data_source_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::data_source.

        To avoid accidental use of raw pointers, lora_sdr::data_source's constructor is in a private implementation class. lora_sdr::data_source::make is the public interface for creating new instances.

        Args:
            pay_len : 
            n_frames : 
        """
        return _lora_sdr_swig.data_source_sptr_make(self, pay_len, n_frames)

    def history(self) -> "unsigned int":
        r"""history(data_source_sptr self) -> unsigned int"""
        return _lora_sdr_swig.data_source_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(data_source_sptr self, int which, int delay)
        declare_sample_delay(data_source_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.data_source_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(data_source_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.data_source_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(data_source_sptr self, int multiple)"""
        return _lora_sdr_swig.data_source_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(data_source_sptr self) -> int"""
        return _lora_sdr_swig.data_source_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(data_source_sptr self) -> double"""
        return _lora_sdr_swig.data_source_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(data_source_sptr self) -> uint64_t"""
        return _lora_sdr_swig.data_source_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(data_source_sptr self) -> uint64_t"""
        return _lora_sdr_swig.data_source_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(data_source_sptr self) -> bool"""
        return _lora_sdr_swig.data_source_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(data_source_sptr self) -> bool"""
        return _lora_sdr_swig.data_source_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(data_source_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.data_source_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(data_source_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.data_source_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(data_source_sptr self, std::string level)"""
        return _lora_sdr_swig.data_source_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(data_source_sptr self) -> std::string"""
        return _lora_sdr_swig.data_source_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(data_source_sptr self) -> int"""
        return _lora_sdr_swig.data_source_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(data_source_sptr self, int m)"""
        return _lora_sdr_swig.data_source_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(data_source_sptr self)"""
        return _lora_sdr_swig.data_source_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(data_source_sptr self) -> bool"""
        return _lora_sdr_swig.data_source_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(data_source_sptr self, int m)"""
        return _lora_sdr_swig.data_source_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(data_source_sptr self) -> int"""
        return _lora_sdr_swig.data_source_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(data_source_sptr self, int i) -> long"""
        return _lora_sdr_swig.data_source_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(data_source_sptr self, long max_output_buffer)
        set_max_output_buffer(data_source_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.data_source_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(data_source_sptr self, int i) -> long"""
        return _lora_sdr_swig.data_source_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(data_source_sptr self, long min_output_buffer)
        set_min_output_buffer(data_source_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.data_source_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(data_source_sptr self) -> float"""
        return _lora_sdr_swig.data_source_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(data_source_sptr self) -> float"""
        return _lora_sdr_swig.data_source_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(data_source_sptr self) -> float"""
        return _lora_sdr_swig.data_source_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(data_source_sptr self) -> float"""
        return _lora_sdr_swig.data_source_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(data_source_sptr self) -> float"""
        return _lora_sdr_swig.data_source_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(data_source_sptr self) -> float"""
        return _lora_sdr_swig.data_source_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(data_source_sptr self, int which) -> float
        pc_input_buffers_full(data_source_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.data_source_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(data_source_sptr self, int which) -> float
        pc_input_buffers_full_avg(data_source_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.data_source_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(data_source_sptr self, int which) -> float
        pc_input_buffers_full_var(data_source_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.data_source_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(data_source_sptr self, int which) -> float
        pc_output_buffers_full(data_source_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.data_source_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(data_source_sptr self, int which) -> float
        pc_output_buffers_full_avg(data_source_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.data_source_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(data_source_sptr self, int which) -> float
        pc_output_buffers_full_var(data_source_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.data_source_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(data_source_sptr self) -> float"""
        return _lora_sdr_swig.data_source_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(data_source_sptr self) -> float"""
        return _lora_sdr_swig.data_source_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(data_source_sptr self) -> float"""
        return _lora_sdr_swig.data_source_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(data_source_sptr self) -> float"""
        return _lora_sdr_swig.data_source_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(data_source_sptr self) -> float"""
        return _lora_sdr_swig.data_source_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(data_source_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.data_source_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(data_source_sptr self)"""
        return _lora_sdr_swig.data_source_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(data_source_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.data_source_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(data_source_sptr self) -> int"""
        return _lora_sdr_swig.data_source_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(data_source_sptr self) -> int"""
        return _lora_sdr_swig.data_source_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(data_source_sptr self, int priority) -> int"""
        return _lora_sdr_swig.data_source_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(data_source_sptr self) -> std::string"""
        return _lora_sdr_swig.data_source_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(data_source_sptr self) -> std::string"""
        return _lora_sdr_swig.data_source_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(data_source_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.data_source_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(data_source_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.data_source_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(data_source_sptr self) -> long"""
        return _lora_sdr_swig.data_source_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(data_source_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.data_source_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(data_source_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.data_source_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(data_source_sptr self) -> std::string"""
        return _lora_sdr_swig.data_source_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(data_source_sptr self, std::string name)"""
        return _lora_sdr_swig.data_source_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(data_source_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.data_source_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(data_source_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.data_source_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(data_source_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.data_source_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(data_source_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.data_source_sptr_message_subscribers(self, which_port)

# Register data_source_sptr in _lora_sdr_swig:
_lora_sdr_swig.data_source_sptr_swigregister(data_source_sptr)


data_source_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
data_source = data_source.make;

class frame_sync(object):
    r"""
    Block that is able to detect the received spectrum and start to find the data such that it can be decoded. This block is at the heart of the the RX (decoding) side and houses a lot of logic and data manipulation. For more information about the implementation visit frame_sync_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::frame_sync.

    To avoid accidental use of raw pointers, lora_sdr::frame_sync's constructor is in a private implementation class. lora_sdr::frame_sync::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        bandwidth : 
        sf : 
        impl_head : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(samp_rate: "float", bandwidth: "uint32_t", sf: "uint8_t", impl_head: "bool") -> "gr::lora_sdr::frame_sync::sptr":
        r"""
        make(float samp_rate, uint32_t bandwidth, uint8_t sf, bool impl_head) -> frame_sync_sptr
        Block that is able to detect the received spectrum and start to find the data such that it can be decoded. This block is at the heart of the the RX (decoding) side and houses a lot of logic and data manipulation. For more information about the implementation visit frame_sync_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::frame_sync.

        To avoid accidental use of raw pointers, lora_sdr::frame_sync's constructor is in a private implementation class. lora_sdr::frame_sync::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            bandwidth : 
            sf : 
            impl_head : 
        """
        return _lora_sdr_swig.frame_sync_make(samp_rate, bandwidth, sf, impl_head)
    __swig_destroy__ = _lora_sdr_swig.delete_frame_sync

# Register frame_sync in _lora_sdr_swig:
_lora_sdr_swig.frame_sync_swigregister(frame_sync)

def frame_sync_make(samp_rate: "float", bandwidth: "uint32_t", sf: "uint8_t", impl_head: "bool") -> "gr::lora_sdr::frame_sync::sptr":
    r"""
    frame_sync_make(float samp_rate, uint32_t bandwidth, uint8_t sf, bool impl_head) -> frame_sync_sptr
    Block that is able to detect the received spectrum and start to find the data such that it can be decoded. This block is at the heart of the the RX (decoding) side and houses a lot of logic and data manipulation. For more information about the implementation visit frame_sync_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::frame_sync.

    To avoid accidental use of raw pointers, lora_sdr::frame_sync's constructor is in a private implementation class. lora_sdr::frame_sync::make is the public interface for creating new instances.

    Args:
        samp_rate : 
        bandwidth : 
        sf : 
        impl_head : 
    """
    return _lora_sdr_swig.frame_sync_make(samp_rate, bandwidth, sf, impl_head)

class frame_sync_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::frame_sync > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(frame_sync_sptr self) -> frame_sync_sptr
        __init__(frame_sync_sptr self, frame_sync p) -> frame_sync_sptr
        """
        _lora_sdr_swig.frame_sync_sptr_swiginit(self, _lora_sdr_swig.new_frame_sync_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::frame_sync *":
        r"""__deref__(frame_sync_sptr self) -> frame_sync"""
        return _lora_sdr_swig.frame_sync_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_frame_sync_sptr

    def make(self, samp_rate: "float", bandwidth: "uint32_t", sf: "uint8_t", impl_head: "bool") -> "gr::lora_sdr::frame_sync::sptr":
        r"""
        make(frame_sync_sptr self, float samp_rate, uint32_t bandwidth, uint8_t sf, bool impl_head) -> frame_sync_sptr
        Block that is able to detect the received spectrum and start to find the data such that it can be decoded. This block is at the heart of the the RX (decoding) side and houses a lot of logic and data manipulation. For more information about the implementation visit frame_sync_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::frame_sync.

        To avoid accidental use of raw pointers, lora_sdr::frame_sync's constructor is in a private implementation class. lora_sdr::frame_sync::make is the public interface for creating new instances.

        Args:
            samp_rate : 
            bandwidth : 
            sf : 
            impl_head : 
        """
        return _lora_sdr_swig.frame_sync_sptr_make(self, samp_rate, bandwidth, sf, impl_head)

    def history(self) -> "unsigned int":
        r"""history(frame_sync_sptr self) -> unsigned int"""
        return _lora_sdr_swig.frame_sync_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(frame_sync_sptr self, int which, int delay)
        declare_sample_delay(frame_sync_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.frame_sync_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(frame_sync_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.frame_sync_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(frame_sync_sptr self, int multiple)"""
        return _lora_sdr_swig.frame_sync_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(frame_sync_sptr self) -> int"""
        return _lora_sdr_swig.frame_sync_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(frame_sync_sptr self) -> double"""
        return _lora_sdr_swig.frame_sync_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(frame_sync_sptr self) -> uint64_t"""
        return _lora_sdr_swig.frame_sync_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(frame_sync_sptr self) -> uint64_t"""
        return _lora_sdr_swig.frame_sync_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(frame_sync_sptr self) -> bool"""
        return _lora_sdr_swig.frame_sync_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(frame_sync_sptr self) -> bool"""
        return _lora_sdr_swig.frame_sync_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(frame_sync_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.frame_sync_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(frame_sync_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.frame_sync_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(frame_sync_sptr self, std::string level)"""
        return _lora_sdr_swig.frame_sync_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(frame_sync_sptr self) -> std::string"""
        return _lora_sdr_swig.frame_sync_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(frame_sync_sptr self) -> int"""
        return _lora_sdr_swig.frame_sync_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(frame_sync_sptr self, int m)"""
        return _lora_sdr_swig.frame_sync_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(frame_sync_sptr self)"""
        return _lora_sdr_swig.frame_sync_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(frame_sync_sptr self) -> bool"""
        return _lora_sdr_swig.frame_sync_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(frame_sync_sptr self, int m)"""
        return _lora_sdr_swig.frame_sync_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(frame_sync_sptr self) -> int"""
        return _lora_sdr_swig.frame_sync_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(frame_sync_sptr self, int i) -> long"""
        return _lora_sdr_swig.frame_sync_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(frame_sync_sptr self, long max_output_buffer)
        set_max_output_buffer(frame_sync_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.frame_sync_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(frame_sync_sptr self, int i) -> long"""
        return _lora_sdr_swig.frame_sync_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(frame_sync_sptr self, long min_output_buffer)
        set_min_output_buffer(frame_sync_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.frame_sync_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(frame_sync_sptr self) -> float"""
        return _lora_sdr_swig.frame_sync_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(frame_sync_sptr self) -> float"""
        return _lora_sdr_swig.frame_sync_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(frame_sync_sptr self) -> float"""
        return _lora_sdr_swig.frame_sync_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(frame_sync_sptr self) -> float"""
        return _lora_sdr_swig.frame_sync_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(frame_sync_sptr self) -> float"""
        return _lora_sdr_swig.frame_sync_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(frame_sync_sptr self) -> float"""
        return _lora_sdr_swig.frame_sync_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(frame_sync_sptr self, int which) -> float
        pc_input_buffers_full(frame_sync_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.frame_sync_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(frame_sync_sptr self, int which) -> float
        pc_input_buffers_full_avg(frame_sync_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.frame_sync_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(frame_sync_sptr self, int which) -> float
        pc_input_buffers_full_var(frame_sync_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.frame_sync_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(frame_sync_sptr self, int which) -> float
        pc_output_buffers_full(frame_sync_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.frame_sync_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(frame_sync_sptr self, int which) -> float
        pc_output_buffers_full_avg(frame_sync_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.frame_sync_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(frame_sync_sptr self, int which) -> float
        pc_output_buffers_full_var(frame_sync_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.frame_sync_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(frame_sync_sptr self) -> float"""
        return _lora_sdr_swig.frame_sync_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(frame_sync_sptr self) -> float"""
        return _lora_sdr_swig.frame_sync_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(frame_sync_sptr self) -> float"""
        return _lora_sdr_swig.frame_sync_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(frame_sync_sptr self) -> float"""
        return _lora_sdr_swig.frame_sync_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(frame_sync_sptr self) -> float"""
        return _lora_sdr_swig.frame_sync_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(frame_sync_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.frame_sync_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(frame_sync_sptr self)"""
        return _lora_sdr_swig.frame_sync_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(frame_sync_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.frame_sync_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(frame_sync_sptr self) -> int"""
        return _lora_sdr_swig.frame_sync_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(frame_sync_sptr self) -> int"""
        return _lora_sdr_swig.frame_sync_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(frame_sync_sptr self, int priority) -> int"""
        return _lora_sdr_swig.frame_sync_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(frame_sync_sptr self) -> std::string"""
        return _lora_sdr_swig.frame_sync_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(frame_sync_sptr self) -> std::string"""
        return _lora_sdr_swig.frame_sync_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(frame_sync_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.frame_sync_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(frame_sync_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.frame_sync_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(frame_sync_sptr self) -> long"""
        return _lora_sdr_swig.frame_sync_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(frame_sync_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.frame_sync_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(frame_sync_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.frame_sync_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(frame_sync_sptr self) -> std::string"""
        return _lora_sdr_swig.frame_sync_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(frame_sync_sptr self, std::string name)"""
        return _lora_sdr_swig.frame_sync_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(frame_sync_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.frame_sync_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(frame_sync_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.frame_sync_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(frame_sync_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.frame_sync_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(frame_sync_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.frame_sync_sptr_message_subscribers(self, which_port)

# Register frame_sync_sptr in _lora_sdr_swig:
_lora_sdr_swig.frame_sync_sptr_swigregister(frame_sync_sptr)


frame_sync_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frame_sync = frame_sync.make;

class deinterleaver(object):
    r"""
    Deinterleaves the received payload, for more information about the implementation visit deinterleaver_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::deinterleaver.

    To avoid accidental use of raw pointers, lora_sdr::deinterleaver's constructor is in a private implementation class. lora_sdr::deinterleaver::make is the public interface for creating new instances.

    Args:
        sf : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(sf: "uint8_t") -> "gr::lora_sdr::deinterleaver::sptr":
        r"""
        make(uint8_t sf) -> deinterleaver_sptr
        Deinterleaves the received payload, for more information about the implementation visit deinterleaver_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::deinterleaver.

        To avoid accidental use of raw pointers, lora_sdr::deinterleaver's constructor is in a private implementation class. lora_sdr::deinterleaver::make is the public interface for creating new instances.

        Args:
            sf : 
        """
        return _lora_sdr_swig.deinterleaver_make(sf)
    __swig_destroy__ = _lora_sdr_swig.delete_deinterleaver

# Register deinterleaver in _lora_sdr_swig:
_lora_sdr_swig.deinterleaver_swigregister(deinterleaver)

def deinterleaver_make(sf: "uint8_t") -> "gr::lora_sdr::deinterleaver::sptr":
    r"""
    deinterleaver_make(uint8_t sf) -> deinterleaver_sptr
    Deinterleaves the received payload, for more information about the implementation visit deinterleaver_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::deinterleaver.

    To avoid accidental use of raw pointers, lora_sdr::deinterleaver's constructor is in a private implementation class. lora_sdr::deinterleaver::make is the public interface for creating new instances.

    Args:
        sf : 
    """
    return _lora_sdr_swig.deinterleaver_make(sf)

class deinterleaver_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::deinterleaver > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(deinterleaver_sptr self) -> deinterleaver_sptr
        __init__(deinterleaver_sptr self, deinterleaver p) -> deinterleaver_sptr
        """
        _lora_sdr_swig.deinterleaver_sptr_swiginit(self, _lora_sdr_swig.new_deinterleaver_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::deinterleaver *":
        r"""__deref__(deinterleaver_sptr self) -> deinterleaver"""
        return _lora_sdr_swig.deinterleaver_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_deinterleaver_sptr

    def make(self, sf: "uint8_t") -> "gr::lora_sdr::deinterleaver::sptr":
        r"""
        make(deinterleaver_sptr self, uint8_t sf) -> deinterleaver_sptr
        Deinterleaves the received payload, for more information about the implementation visit deinterleaver_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::deinterleaver.

        To avoid accidental use of raw pointers, lora_sdr::deinterleaver's constructor is in a private implementation class. lora_sdr::deinterleaver::make is the public interface for creating new instances.

        Args:
            sf : 
        """
        return _lora_sdr_swig.deinterleaver_sptr_make(self, sf)

    def history(self) -> "unsigned int":
        r"""history(deinterleaver_sptr self) -> unsigned int"""
        return _lora_sdr_swig.deinterleaver_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(deinterleaver_sptr self, int which, int delay)
        declare_sample_delay(deinterleaver_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.deinterleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(deinterleaver_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.deinterleaver_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(deinterleaver_sptr self, int multiple)"""
        return _lora_sdr_swig.deinterleaver_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(deinterleaver_sptr self) -> int"""
        return _lora_sdr_swig.deinterleaver_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(deinterleaver_sptr self) -> double"""
        return _lora_sdr_swig.deinterleaver_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(deinterleaver_sptr self) -> uint64_t"""
        return _lora_sdr_swig.deinterleaver_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(deinterleaver_sptr self) -> uint64_t"""
        return _lora_sdr_swig.deinterleaver_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(deinterleaver_sptr self) -> bool"""
        return _lora_sdr_swig.deinterleaver_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(deinterleaver_sptr self) -> bool"""
        return _lora_sdr_swig.deinterleaver_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(deinterleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.deinterleaver_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(deinterleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.deinterleaver_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(deinterleaver_sptr self, std::string level)"""
        return _lora_sdr_swig.deinterleaver_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(deinterleaver_sptr self) -> std::string"""
        return _lora_sdr_swig.deinterleaver_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(deinterleaver_sptr self) -> int"""
        return _lora_sdr_swig.deinterleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(deinterleaver_sptr self, int m)"""
        return _lora_sdr_swig.deinterleaver_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(deinterleaver_sptr self)"""
        return _lora_sdr_swig.deinterleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(deinterleaver_sptr self) -> bool"""
        return _lora_sdr_swig.deinterleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(deinterleaver_sptr self, int m)"""
        return _lora_sdr_swig.deinterleaver_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(deinterleaver_sptr self) -> int"""
        return _lora_sdr_swig.deinterleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(deinterleaver_sptr self, int i) -> long"""
        return _lora_sdr_swig.deinterleaver_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(deinterleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(deinterleaver_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.deinterleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(deinterleaver_sptr self, int i) -> long"""
        return _lora_sdr_swig.deinterleaver_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(deinterleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(deinterleaver_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.deinterleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(deinterleaver_sptr self) -> float"""
        return _lora_sdr_swig.deinterleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(deinterleaver_sptr self) -> float"""
        return _lora_sdr_swig.deinterleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(deinterleaver_sptr self) -> float"""
        return _lora_sdr_swig.deinterleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(deinterleaver_sptr self) -> float"""
        return _lora_sdr_swig.deinterleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(deinterleaver_sptr self) -> float"""
        return _lora_sdr_swig.deinterleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(deinterleaver_sptr self) -> float"""
        return _lora_sdr_swig.deinterleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full(deinterleaver_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.deinterleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(deinterleaver_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.deinterleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(deinterleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(deinterleaver_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.deinterleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full(deinterleaver_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.deinterleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(deinterleaver_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.deinterleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(deinterleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(deinterleaver_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.deinterleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(deinterleaver_sptr self) -> float"""
        return _lora_sdr_swig.deinterleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(deinterleaver_sptr self) -> float"""
        return _lora_sdr_swig.deinterleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(deinterleaver_sptr self) -> float"""
        return _lora_sdr_swig.deinterleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(deinterleaver_sptr self) -> float"""
        return _lora_sdr_swig.deinterleaver_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(deinterleaver_sptr self) -> float"""
        return _lora_sdr_swig.deinterleaver_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(deinterleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.deinterleaver_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(deinterleaver_sptr self)"""
        return _lora_sdr_swig.deinterleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(deinterleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.deinterleaver_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(deinterleaver_sptr self) -> int"""
        return _lora_sdr_swig.deinterleaver_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(deinterleaver_sptr self) -> int"""
        return _lora_sdr_swig.deinterleaver_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(deinterleaver_sptr self, int priority) -> int"""
        return _lora_sdr_swig.deinterleaver_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(deinterleaver_sptr self) -> std::string"""
        return _lora_sdr_swig.deinterleaver_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(deinterleaver_sptr self) -> std::string"""
        return _lora_sdr_swig.deinterleaver_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(deinterleaver_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.deinterleaver_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(deinterleaver_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.deinterleaver_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(deinterleaver_sptr self) -> long"""
        return _lora_sdr_swig.deinterleaver_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(deinterleaver_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.deinterleaver_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(deinterleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.deinterleaver_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(deinterleaver_sptr self) -> std::string"""
        return _lora_sdr_swig.deinterleaver_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(deinterleaver_sptr self, std::string name)"""
        return _lora_sdr_swig.deinterleaver_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(deinterleaver_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.deinterleaver_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(deinterleaver_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.deinterleaver_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(deinterleaver_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.deinterleaver_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(deinterleaver_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.deinterleaver_sptr_message_subscribers(self, which_port)

# Register deinterleaver_sptr in _lora_sdr_swig:
_lora_sdr_swig.deinterleaver_sptr_swigregister(deinterleaver_sptr)


deinterleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
deinterleaver = deinterleaver.make;

class err_measures(object):
    r"""
    Simple block that can count and output the number of Bit Error's (BE) ,for more information about the implementation visit err_measures_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::err_measures.

    To avoid accidental use of raw pointers, lora_sdr::err_measures's constructor is in a private implementation class. lora_sdr::err_measures::make is the public interface for creating new instances.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make() -> "gr::lora_sdr::err_measures::sptr":
        r"""
        make() -> err_measures_sptr
        Simple block that can count and output the number of Bit Error's (BE) ,for more information about the implementation visit err_measures_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::err_measures.

        To avoid accidental use of raw pointers, lora_sdr::err_measures's constructor is in a private implementation class. lora_sdr::err_measures::make is the public interface for creating new instances.
        """
        return _lora_sdr_swig.err_measures_make()
    __swig_destroy__ = _lora_sdr_swig.delete_err_measures

# Register err_measures in _lora_sdr_swig:
_lora_sdr_swig.err_measures_swigregister(err_measures)

def err_measures_make() -> "gr::lora_sdr::err_measures::sptr":
    r"""
    err_measures_make() -> err_measures_sptr
    Simple block that can count and output the number of Bit Error's (BE) ,for more information about the implementation visit err_measures_impl.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of lora_sdr::err_measures.

    To avoid accidental use of raw pointers, lora_sdr::err_measures's constructor is in a private implementation class. lora_sdr::err_measures::make is the public interface for creating new instances.
    """
    return _lora_sdr_swig.err_measures_make()

class err_measures_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::lora_sdr::err_measures > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(err_measures_sptr self) -> err_measures_sptr
        __init__(err_measures_sptr self, err_measures p) -> err_measures_sptr
        """
        _lora_sdr_swig.err_measures_sptr_swiginit(self, _lora_sdr_swig.new_err_measures_sptr(*args))

    def __deref__(self) -> "gr::lora_sdr::err_measures *":
        r"""__deref__(err_measures_sptr self) -> err_measures"""
        return _lora_sdr_swig.err_measures_sptr___deref__(self)
    __swig_destroy__ = _lora_sdr_swig.delete_err_measures_sptr

    def make(self) -> "gr::lora_sdr::err_measures::sptr":
        r"""
        make(err_measures_sptr self) -> err_measures_sptr
        Simple block that can count and output the number of Bit Error's (BE) ,for more information about the implementation visit err_measures_impl.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of lora_sdr::err_measures.

        To avoid accidental use of raw pointers, lora_sdr::err_measures's constructor is in a private implementation class. lora_sdr::err_measures::make is the public interface for creating new instances.
        """
        return _lora_sdr_swig.err_measures_sptr_make(self)

    def history(self) -> "unsigned int":
        r"""history(err_measures_sptr self) -> unsigned int"""
        return _lora_sdr_swig.err_measures_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(err_measures_sptr self, int which, int delay)
        declare_sample_delay(err_measures_sptr self, unsigned int delay)
        """
        return _lora_sdr_swig.err_measures_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(err_measures_sptr self, int which) -> unsigned int"""
        return _lora_sdr_swig.err_measures_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(err_measures_sptr self, int multiple)"""
        return _lora_sdr_swig.err_measures_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(err_measures_sptr self) -> int"""
        return _lora_sdr_swig.err_measures_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(err_measures_sptr self) -> double"""
        return _lora_sdr_swig.err_measures_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(err_measures_sptr self) -> uint64_t"""
        return _lora_sdr_swig.err_measures_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(err_measures_sptr self) -> uint64_t"""
        return _lora_sdr_swig.err_measures_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(err_measures_sptr self) -> bool"""
        return _lora_sdr_swig.err_measures_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(err_measures_sptr self) -> bool"""
        return _lora_sdr_swig.err_measures_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(err_measures_sptr self, unsigned int which_input) -> uint64_t"""
        return _lora_sdr_swig.err_measures_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(err_measures_sptr self, unsigned int which_output) -> uint64_t"""
        return _lora_sdr_swig.err_measures_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(err_measures_sptr self, std::string level)"""
        return _lora_sdr_swig.err_measures_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(err_measures_sptr self) -> std::string"""
        return _lora_sdr_swig.err_measures_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(err_measures_sptr self) -> int"""
        return _lora_sdr_swig.err_measures_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(err_measures_sptr self, int m)"""
        return _lora_sdr_swig.err_measures_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(err_measures_sptr self)"""
        return _lora_sdr_swig.err_measures_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(err_measures_sptr self) -> bool"""
        return _lora_sdr_swig.err_measures_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(err_measures_sptr self, int m)"""
        return _lora_sdr_swig.err_measures_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(err_measures_sptr self) -> int"""
        return _lora_sdr_swig.err_measures_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(err_measures_sptr self, int i) -> long"""
        return _lora_sdr_swig.err_measures_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(err_measures_sptr self, long max_output_buffer)
        set_max_output_buffer(err_measures_sptr self, int port, long max_output_buffer)
        """
        return _lora_sdr_swig.err_measures_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(err_measures_sptr self, int i) -> long"""
        return _lora_sdr_swig.err_measures_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(err_measures_sptr self, long min_output_buffer)
        set_min_output_buffer(err_measures_sptr self, int port, long min_output_buffer)
        """
        return _lora_sdr_swig.err_measures_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(err_measures_sptr self) -> float"""
        return _lora_sdr_swig.err_measures_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(err_measures_sptr self) -> float"""
        return _lora_sdr_swig.err_measures_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(err_measures_sptr self) -> float"""
        return _lora_sdr_swig.err_measures_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(err_measures_sptr self) -> float"""
        return _lora_sdr_swig.err_measures_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(err_measures_sptr self) -> float"""
        return _lora_sdr_swig.err_measures_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(err_measures_sptr self) -> float"""
        return _lora_sdr_swig.err_measures_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(err_measures_sptr self, int which) -> float
        pc_input_buffers_full(err_measures_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.err_measures_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(err_measures_sptr self, int which) -> float
        pc_input_buffers_full_avg(err_measures_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.err_measures_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(err_measures_sptr self, int which) -> float
        pc_input_buffers_full_var(err_measures_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.err_measures_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(err_measures_sptr self, int which) -> float
        pc_output_buffers_full(err_measures_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.err_measures_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(err_measures_sptr self, int which) -> float
        pc_output_buffers_full_avg(err_measures_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.err_measures_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(err_measures_sptr self, int which) -> float
        pc_output_buffers_full_var(err_measures_sptr self) -> pmt_vector_float
        """
        return _lora_sdr_swig.err_measures_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(err_measures_sptr self) -> float"""
        return _lora_sdr_swig.err_measures_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(err_measures_sptr self) -> float"""
        return _lora_sdr_swig.err_measures_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(err_measures_sptr self) -> float"""
        return _lora_sdr_swig.err_measures_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(err_measures_sptr self) -> float"""
        return _lora_sdr_swig.err_measures_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(err_measures_sptr self) -> float"""
        return _lora_sdr_swig.err_measures_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(err_measures_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _lora_sdr_swig.err_measures_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(err_measures_sptr self)"""
        return _lora_sdr_swig.err_measures_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(err_measures_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _lora_sdr_swig.err_measures_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(err_measures_sptr self) -> int"""
        return _lora_sdr_swig.err_measures_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(err_measures_sptr self) -> int"""
        return _lora_sdr_swig.err_measures_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(err_measures_sptr self, int priority) -> int"""
        return _lora_sdr_swig.err_measures_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(err_measures_sptr self) -> std::string"""
        return _lora_sdr_swig.err_measures_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(err_measures_sptr self) -> std::string"""
        return _lora_sdr_swig.err_measures_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(err_measures_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.err_measures_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(err_measures_sptr self) -> io_signature_sptr"""
        return _lora_sdr_swig.err_measures_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(err_measures_sptr self) -> long"""
        return _lora_sdr_swig.err_measures_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(err_measures_sptr self) -> basic_block_sptr"""
        return _lora_sdr_swig.err_measures_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(err_measures_sptr self, int ninputs, int noutputs) -> bool"""
        return _lora_sdr_swig.err_measures_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(err_measures_sptr self) -> std::string"""
        return _lora_sdr_swig.err_measures_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(err_measures_sptr self, std::string name)"""
        return _lora_sdr_swig.err_measures_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(err_measures_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _lora_sdr_swig.err_measures_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(err_measures_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.err_measures_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(err_measures_sptr self) -> swig_pmt_ptr"""
        return _lora_sdr_swig.err_measures_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(err_measures_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _lora_sdr_swig.err_measures_sptr_message_subscribers(self, which_port)

# Register err_measures_sptr in _lora_sdr_swig:
_lora_sdr_swig.err_measures_sptr_swigregister(err_measures_sptr)


err_measures_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
err_measures = err_measures.make;



